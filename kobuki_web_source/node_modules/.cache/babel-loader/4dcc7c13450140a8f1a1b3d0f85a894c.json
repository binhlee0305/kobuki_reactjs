{"ast":null,"code":"var _jsxFileName = \"/home/binhlee/Desktop/kobuki_web_source/src/components/Controller/Mode.js\";\nimport React, { Component } from \"react\";\nimport { Container, Card, Col, Row, Button, ButtonGroup, ToggleButton } from \"react-bootstrap\";\nimport \"../CommonStyle.css\";\nimport \"./Controller.css\";\nimport { Direction } from \"../Common/Common.ts\";\nimport ROSLIB from \"roslib\";\n\nfunction ControlButton(props) {\n  return /*#__PURE__*/React.createElement(Button, {\n    variant: \"secondary\",\n    size: \"lg\",\n    className: \"button-control\",\n    onClick: props.onClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 10\n    }\n  }, props.label);\n}\n\nfunction ButtonDonotThing(props) {\n  return /*#__PURE__*/React.createElement(Button, {\n    variant: \"secondary\",\n    size: \"lg\",\n    className: \"button-donot-thing\",\n    onClick: props.onClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 10\n    }\n  }, props.label);\n}\n\nconst radios = [{\n  name: 'Mapping',\n  value: '1'\n}, {\n  name: 'Localization',\n  value: '2'\n}];\n\nclass Controller extends Component {\n  constructor(props) {\n    super(props);\n\n    this._handleKeyDown = event => {\n      // console.log(\"pressed \" + event.keyCode);\n      let target = Command.find(item => {\n        if (item.code === event.keyCode) {\n          return item;\n        }\n      });\n\n      if (target) {\n        // console.log(\"press dir \" + target.dir);\n        this.onControl(0, target.dir);\n      }\n    };\n\n    this.state = {\n      keyboard_enable: false,\n      radioValue: '1',\n      checked: false\n    };\n    this.angularVel = props.angularVel || 0;\n    this.linearVel = props.linearVel || 0;\n    this.ros = props.ros || null;\n    this.addEventKeyboard = false;\n    this.onChangeKeyboardControl = this.onChangeKeyboardControl.bind(this);\n    this._handleKeyDown = this._handleKeyDown.bind(this);\n    this.mappingModeService = null;\n    this.localizationModeService = null;\n  }\n\n  componentDidUpdate() {\n    if (this.ros !== this.props.ros) {\n      this.ros = this.props.ros;\n\n      if (this.ros != null) {\n        console.log('abc');\n        this.mappingModeService = new ROSLIB.Service({\n          ros: this.ros,\n          name: '/rtabmap/set_mode_mapping',\n          serviceType: 'std_srvs/Empty'\n        });\n        this.localizationModeService = new ROSLIB.Service({\n          ros: this.ros,\n          name: '/rtabmap/set_mode_localization',\n          serviceType: 'std_srvs/Empty'\n        });\n      }\n    }\n  }\n\n  componentDidMount() {// BannerDataStore.addChangeListener(this._onchange);\n    // document.addEventListener(\"keydown\", this._handleKeyDown);\n  }\n\n  componentWillUnmount() {\n    // BannerDataStore.removeChangeListener(this._onchange);\n    if (this.addEventKeyboard) {\n      document.removeEventListener(\"keydown\", this._handleKeyDown);\n    }\n  }\n\n  onChangeKeyboardControl(event) {\n    console.log(\"change switch \" + event.target.checked);\n    this.setState({\n      keyboard_enable: event.target.checked\n    });\n\n    if (event.target.checked === true) {\n      if (!this.addEventKeyboard) {\n        console.log(\"Enable keyboard\");\n        document.addEventListener(\"keydown\", this._handleKeyDown);\n        this.addEventKeyboard = true;\n      }\n    } else if (event.target.checked === false) {\n      if (this.addEventKeyboard) {\n        console.log(\"Disable keyboard\");\n        document.removeEventListener(\"keydown\", this._handleKeyDown);\n        this.addEventKeyboard = false;\n      }\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Container, {\n      className: \"box-margin\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      border: \"secondary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      style: {\n        fontSize: \"1.2rem\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 54\n      }\n    }, \"Mode\")), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      style: {\n        marginTop: \"1rem\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(ButtonGroup, {\n      toggle: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }\n    }, radios.map((radio, idx) => /*#__PURE__*/React.createElement(ToggleButton, {\n      key: idx,\n      type: \"radio\",\n      variant: \"secondary\",\n      name: \"radio\",\n      value: radio.value,\n      checked: this.state.radioValue === radio.value,\n      onChange: e => {\n        this.setState({\n          radioValue: e.currentTarget.value\n        });\n        e.currentTarget.value === '1' ? this.mappingModeService.callService() : this.localizationModeService.callService();\n        e.currentTarget.value === '1' ? this.mappingModeService.callService() : this.localizationModeService.callService();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 21\n      }\n    }, radio.name))))))));\n  }\n\n}\n\nexport default Mode;","map":{"version":3,"sources":["/home/binhlee/Desktop/kobuki_web_source/src/components/Controller/Mode.js"],"names":["React","Component","Container","Card","Col","Row","Button","ButtonGroup","ToggleButton","Direction","ROSLIB","ControlButton","props","onClick","label","ButtonDonotThing","radios","name","value","Controller","constructor","_handleKeyDown","event","target","Command","find","item","code","keyCode","onControl","dir","state","keyboard_enable","radioValue","checked","angularVel","linearVel","ros","addEventKeyboard","onChangeKeyboardControl","bind","mappingModeService","localizationModeService","componentDidUpdate","console","log","Service","serviceType","componentDidMount","componentWillUnmount","document","removeEventListener","setState","addEventListener","render","fontSize","marginTop","map","radio","idx","e","currentTarget","callService","Mode"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Container, Card, Col, Row, Button, ButtonGroup, ToggleButton } from \"react-bootstrap\";\nimport \"../CommonStyle.css\";\nimport \"./Controller.css\";\nimport { Direction } from \"../Common/Common.ts\";\nimport ROSLIB from \"roslib\";\n\nfunction ControlButton(props) {\n  return <Button variant=\"secondary\" size=\"lg\" className=\"button-control\" onClick={props.onClick}>{props.label}</Button>\n}\n\nfunction ButtonDonotThing(props) {\n  return <Button variant=\"secondary\" size=\"lg\" className=\"button-donot-thing\" onClick={props.onClick}>{props.label}</Button>\n}\n\nconst radios = [\n  { name: 'Mapping', value: '1' },\n  { name: 'Localization',   value: '2' },\n];\n\nclass Controller extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      keyboard_enable: false,\n      radioValue: '1',\n      checked: false,\n    };\n    this.angularVel = props.angularVel || 0;\n    this.linearVel = props.linearVel || 0;\n    this.ros = props.ros || null;\n    this.addEventKeyboard = false;\n    this.onChangeKeyboardControl = this.onChangeKeyboardControl.bind(this);\n    this._handleKeyDown = this._handleKeyDown.bind(this);\n    this.mappingModeService = null;\n    this.localizationModeService = null;\n  }\n\n  _handleKeyDown = (event) => {\n    // console.log(\"pressed \" + event.keyCode);\n    let target = Command.find(item => {\n      if (item.code === event.keyCode) {\n        return item;\n      }\n    });\n    if (target) {\n      // console.log(\"press dir \" + target.dir);\n      this.onControl(0, target.dir);\n    }\n  }\n\n  componentDidUpdate() {\n    if (this.ros !== this.props.ros) {\n      this.ros = this.props.ros;\n      if (this.ros != null) {\n        console.log('abc')\n        this.mappingModeService = new ROSLIB.Service({\n          ros: this.ros,\n          name: '/rtabmap/set_mode_mapping',\n          serviceType: 'std_srvs/Empty'\n        });\n        this.localizationModeService = new ROSLIB.Service({\n          ros: this.ros,\n          name: '/rtabmap/set_mode_localization',\n          serviceType: 'std_srvs/Empty'\n        });\n      }\n    }\n  }\n\n  componentDidMount() {\n    // BannerDataStore.addChangeListener(this._onchange);\n    // document.addEventListener(\"keydown\", this._handleKeyDown);\n  }\n\n  componentWillUnmount() {\n    // BannerDataStore.removeChangeListener(this._onchange);\n    if (this.addEventKeyboard) {\n      document.removeEventListener(\"keydown\", this._handleKeyDown);\n    }\n  }\n\n  onChangeKeyboardControl(event) {\n    console.log(\"change switch \" + event.target.checked);\n    this.setState({ keyboard_enable: event.target.checked });\n    if (event.target.checked === true) {\n      if (!this.addEventKeyboard) {\n        console.log(\"Enable keyboard\");\n        document.addEventListener(\"keydown\", this._handleKeyDown);\n        this.addEventKeyboard = true;\n      }\n    } else if (event.target.checked === false) {\n      if (this.addEventKeyboard) {\n        console.log(\"Disable keyboard\");\n        document.removeEventListener(\"keydown\", this._handleKeyDown);\n        this.addEventKeyboard = false;\n      }\n    }\n  }\n\n  render() {\n    return (\n      <Container className=\"box-margin\">\n        <Card border=\"secondary\">\n          <Card.Header style={{fontSize: \"1.2rem\" }}><strong>Mode</strong></Card.Header>\n          <Card.Body>\n            <Row style={{marginTop: \"1rem\"}}>\n              {/* <Col sm={4}><p style={{margin: \"0.5rem\", fontSize: \"1.1rem\", textAlign: \"center\"}}>Mode</p></Col> */}\n              <Col>\n                <ButtonGroup toggle>\n                  {radios.map((radio, idx) => (\n                    <ToggleButton\n                      key={idx}\n                      type=\"radio\"\n                      variant=\"secondary\"\n                      name=\"radio\"\n                      value={radio.value}\n                      checked={this.state.radioValue === radio.value}\n                      onChange = {(e) => {\n                        this.setState({radioValue: e.currentTarget.value});\n                        e.currentTarget.value === '1' ? this.mappingModeService.callService() : this.localizationModeService.callService();\n                        e.currentTarget.value === '1' ? this.mappingModeService.callService() : this.localizationModeService.callService();\n                      }}>\n                      {radio.name}\n                    </ToggleButton>\n                  ))}\n                </ButtonGroup>\n              </Col>\n            </Row>\n          </Card.Body>\n        </Card>\n      </Container>\n    )\n  }\n}\n\nexport default Mode;"]},"metadata":{},"sourceType":"module"}