{"ast":null,"code":"import 'latest-createjs';\nimport ROS2D from './ros2d';\nimport ROSLIB from 'roslib';\n/**\n * @author Russell Toris - rctoris@wpi.edu\n * @author Lars Kunze - l.kunze@cs.bham.ac.uk\n */\n\nvar NAV2D = NAV2D || {\n  REVISION: '0.3.0'\n};\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A OccupancyGridClientNav uses an OccupancyGridClient to create a map for use with a Navigator.\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * topic (optional) - the map meta data topic to listen to\n *   * image - the URL of the image to render\n *   * serverName (optional) - the action server name to use for navigation, like '/move_base'\n *   * actionName (optional) - the navigation action name, like 'move_base_msgs/MoveBaseAction'\n *   * rootObject (optional) - the root object to add the click listeners to and render robot markers to\n *   * withOrientation (optional) - if the Navigator should consider the robot orientation (default: false)\n *   * viewer - the main viewer to render to\n */\n\nNAV2D.ImageMapClientNav = function (options) {\n  var that = this;\n  options = options || {};\n  this.ros = options.ros;\n  var topic = options.topic || '/map_metadata';\n  var image = options.image;\n  this.serverName = options.serverName || '/move_base';\n  this.actionName = options.actionName || 'move_base_msgs/MoveBaseAction';\n  this.rootObject = options.rootObject || new createjs.Container();\n  this.viewer = options.viewer;\n  this.withOrientation = options.withOrientation || false;\n  this.navigator = null; // setup a client to get the map\n\n  var client = new ROS2D.ImageMapClient({\n    ros: this.ros,\n    rootObject: this.rootObject,\n    topic: topic,\n    image: image\n  });\n  client.on('change', function () {\n    that.navigator = new NAV2D.Navigator({\n      ros: that.ros,\n      serverName: that.serverName,\n      actionName: that.actionName,\n      rootObject: that.rootObject,\n      withOrientation: that.withOrientation\n    }); // scale the viewer to fit the map\n    // that.viewer.scaleToDimensions(client.currentImage.width, client.currentImage.height);\n    // that.viewer.shift(client.currentImage.pose.position.x, client.currentImage.pose.position.y);\n  });\n};\n/**\n * @author Russell Toris - rctoris@wpi.edu\n * @author Lars Kunze - l.kunze@cs.bham.ac.uk\n */\n\n/**\n * A navigator can be used to add click-to-navigate options to an object. If\n * withOrientation is set to true, the user can also specify the orientation of\n * the robot by clicking at the goal position and pointing into the desired\n * direction (while holding the button pressed).\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * serverName (optional) - the action server name to use for navigation, like '/move_base'\n *   * actionName (optional) - the navigation action name, like 'move_base_msgs/MoveBaseAction'\n *   * rootObject (optional) - the root object to add the click listeners to and render robot markers to\n *   * withOrientation (optional) - if the Navigator should consider the robot orientation (default: false)\n */\n\n\nNAV2D.Navigator = function (options) {\n  var that = this;\n  options = options || {};\n  var ros = options.ros;\n  this.imageRobot = options.imageRobot;\n  this.imageGoalArrow = options.imageGoalArrow;\n  this.imageStationArrow = options.imageStationArrow;\n  var serverName = options.serverName || '/move_base';\n  var actionName = options.actionName || 'move_base_msgs/MoveBaseAction';\n  var withOrientation = options.withOrientation || false;\n  this.rootObject = options.rootObject || new createjs.Container();\n  this.command = options.command || 'none';\n  this.onAddStation = options.onAddStation;\n  this.onClickStation = options.onClickStation;\n  this.onSetGoal = options.onSetGoal;\n  this.stationName = options.stationName || 'NoName';\n  this.stationList = []; // setup the actionlib client\n\n  var actionClient = new ROSLIB.ActionClient({\n    ros: ros,\n    actionName: actionName,\n    serverName: serverName\n  });\n  /**\n   * Send a goal to the navigation stack with the given pose.\n   *\n   * @param pose - the goal pose\n   */\n\n  function sendGoal(pose) {\n    // create a goal\n    var goal = new ROSLIB.Goal({\n      actionClient: actionClient,\n      goalMessage: {\n        target_pose: {\n          header: {\n            frame_id: '/map'\n          },\n          pose: pose\n        }\n      }\n    });\n    goal.send(); // create a marker for the goal\n\n    var goalMarker = new ROS2D.NavigationImage({\n      size: 0.5,\n      image: that.imageGoalArrow,\n      alpha: 0.9\n    });\n    goalMarker.x = pose.position.x;\n    goalMarker.y = -pose.position.y;\n    goalMarker.rotation = stage.rosQuaternionToGlobalTheta(pose.orientation);\n    goalMarker.scaleX = 1.0 / stage.scaleX;\n    goalMarker.scaleY = 1.0 / stage.scaleY;\n    that.rootObject.addChild(goalMarker);\n    goal.on('result', function () {\n      that.rootObject.removeChild(goalMarker);\n    });\n  } // get a handle to the stage\n\n\n  var stage;\n\n  if (that.rootObject instanceof createjs.Stage) {\n    stage = that.rootObject;\n  } else {\n    stage = that.rootObject.getStage();\n  } // marker for the robot\n\n\n  this.robotMarker = new ROS2D.NavigationImage({\n    size: 0.5,\n    image: that.imageRobot,\n    alpha: 0.9\n  }); // wait for a pose to come in first\n\n  this.robotMarker.visible = false;\n  this.robotMarker.zIndex = 0;\n  this.rootObject.addChild(this.robotMarker);\n  var initScaleSet = false; // setup a listener for the robot pose\n\n  var sortBy = function (a, b) {\n    return b.zIndex - a.zIndex;\n  };\n\n  var poseListener = new ROSLIB.Topic({\n    ros: ros,\n    name: '/robot_pose',\n    messageType: 'geometry_msgs/PoseStamped',\n    throttle_rate: 100\n  });\n  poseListener.subscribe(function (pose) {\n    // update the robots position on the map\n    pose = pose.pose; // console.log(pose.position.x);\n\n    that.robotMarker.x = pose.position.x;\n    that.robotMarker.y = -pose.position.y; // change the angle\n\n    that.robotMarker.rotation = stage.rosQuaternionToGlobalTheta(pose.orientation);\n    that.robotMarker.visible = true; // that.rootObject.setChildIndex(that.rootObject.numChildren());\n  }); // withOrientation === true\n  // setup a click-and-point listener (with orientation)\n\n  var position = null;\n  var positionVec3 = null;\n  var thetaRadians = 0;\n  var thetaDegrees = 0;\n  this.orientationMarkerGoal = new ROS2D.NavigationImage({\n    size: 0.52,\n    image: that.imageGoalArrow,\n    alpha: 0.8,\n    pulse: true,\n    onload: true\n  });\n  this.orientationMarkerGoal.visible = false;\n  var orientationMarkerStation = null; // orientationMarkerStation.visible = false;\n\n  var targetMarker = this.orientationMarkerGoal;\n  var mouseDown = false;\n  var mouseMove = false;\n  var xDelta = 0;\n  var yDelta = 0;\n  var zi = 1;\n\n  var mouseEventHandler = function mouseEventHandler(event, mouseState) {\n    if (mouseState === 'down') {\n      // get position when mouse button is pressed down\n      position = stage.globalToRos(event.stageX, event.stageY);\n      positionVec3 = new ROSLIB.Vector3(position);\n      mouseDown = true;\n      mouseMove = false;\n\n      if (that.command == 'SetGoal') {\n        targetMarker = that.orientationMarkerGoal;\n      } else if (that.command == 'AddStation') {\n        orientationMarkerStation = new ROS2D.NavigationImage({\n          size: 0.52,\n          image: that.imageStationArrow,\n          alpha: 0.8,\n          pulse: true,\n          onload: true\n        });\n        targetMarker = orientationMarkerStation;\n      } else {\n        mouseDown = false;\n        var currentPos = stage.globalToRos(event.stageX, event.stageY);\n        var currentPosVec3 = new ROSLIB.Vector3(currentPos);\n        currentPosVec3.y *= -1;\n        var targetIndex = -1;\n        that.stationList.forEach((item, index) => {\n          if (Math.abs(currentPosVec3.x - item.marker.x) < 0.2 && Math.abs(currentPosVec3.y - item.marker.y) < 0.2) {\n            // if (that.command == 'DeleteStation') {\n            //   that.rootObject.removeChild(item.marker);\n            //   that.rootObject.removeChild(item.label);\n            //   targetIndex = index;\n            // }\n            if (that.onClickStation) {\n              that.onClickStation(item.info.id);\n            }\n          }\n        });\n\n        if (targetIndex >= 0) {\n          that.stationList.splice(targetIndex, 1);\n        }\n\n        return;\n      }\n    } else if (mouseDown && mouseState === 'move') {\n      // remove obsolete orientation marker\n      that.rootObject.removeChild(targetMarker);\n      mouseMove = true;\n      var currentPos = stage.globalToRos(event.stageX, event.stageY);\n      var currentPosVec3 = new ROSLIB.Vector3(currentPos);\n      targetMarker.visible = true;\n      xDelta = currentPosVec3.x - positionVec3.x;\n      yDelta = currentPosVec3.y - positionVec3.y;\n      thetaRadians = Math.atan2(xDelta, yDelta);\n      thetaDegrees = thetaRadians * (180.0 / Math.PI);\n\n      if (thetaDegrees >= 0 && thetaDegrees <= 180) {\n        thetaDegrees += 270;\n      } else {\n        thetaDegrees -= 90;\n      }\n\n      targetMarker.x = positionVec3.x;\n      targetMarker.y = -positionVec3.y;\n      targetMarker.rotation = thetaDegrees;\n      targetMarker.zIndex = zi;\n      zi++;\n      that.rootObject.addChildAt(targetMarker, that.rootObject.getChildIndex(that.robotMarker));\n    } else if (mouseDown && mouseState === 'up') {\n      mouseDown = false;\n      var goalPos = stage.globalToRos(event.stageX, event.stageY);\n      var goalPosVec3 = new ROSLIB.Vector3(goalPos);\n      xDelta = goalPosVec3.x - positionVec3.x;\n      yDelta = goalPosVec3.y - positionVec3.y;\n      thetaRadians = Math.atan2(xDelta, yDelta);\n\n      if (thetaRadians >= 0 && thetaRadians <= Math.PI) {\n        thetaRadians += 3 * Math.PI / 2;\n      } else {\n        thetaRadians -= Math.PI / 2;\n      }\n\n      var qz = Math.sin(-thetaRadians / 2.0);\n      var qw = Math.cos(-thetaRadians / 2.0);\n      var orientation = new ROSLIB.Quaternion({\n        x: 0,\n        y: 0,\n        z: qz,\n        w: qw\n      });\n      var pose = new ROSLIB.Pose({\n        position: positionVec3,\n        orientation: orientation\n      }); // send the goal\n      // sendGoal(pose);\n\n      if (mouseMove) {\n        mouseMove = false;\n\n        if (that.command == 'SetGoal') {\n          if (that.onSetGoal) {\n            that.onSetGoal(targetMarker, pose);\n          }\n        } else if (that.command == 'AddStation') {\n          /*\n                    var text = new createjs.Text(that.stationName, \"0.01rem Helvetica\", \"#ff7700\");\n                    text.x = targetMarker.x - text.getBounds().width / 2;\n                    text.y = targetMarker.y - 0.45;\n                    that.rootObject.removeChild(targetMarker);\n                    that.rootObject.addChildAt(text, that.rootObject.getChildIndex(this.robotMarker));\n                    var newStationItem = {\n                      marker: orientationMarkerStation,\n                      label: text,\n                    }\n                    stationList.push(newStationItem);\n          */\n          that.rootObject.removeChild(targetMarker);\n\n          if (that.onAddStation) {\n            that.onAddStation({\n              name: that.stationName,\n              obj: targetMarker,\n              pose: pose,\n              degrees: thetaDegrees,\n              id: Date.now().toString()\n            });\n          }\n        }\n      }\n    }\n  };\n\n  this.rootObject.addEventListener('stagemousedown', function (event) {\n    mouseEventHandler(event, 'down');\n  });\n  this.rootObject.addEventListener('stagemousemove', function (event) {\n    mouseEventHandler(event, 'move');\n  });\n  this.rootObject.addEventListener('stagemouseup', function (event) {\n    mouseEventHandler(event, 'up');\n  }); // this.rootObject.addEventListener('dblclick', function (event) {\n  //   mouseEventHandler(event, 'dbclick');\n  // });\n};\n\nNAV2D.Navigator.prototype.setCommand = function (command) {\n  this.command = command;\n\n  if (this.command == 'CancelGoal') {\n    this.rootObject.removeChild(this.orientationMarkerGoal);\n  }\n};\n\nNAV2D.Navigator.prototype.setStationName = function (stationName) {\n  this.stationName = stationName;\n};\n\nNAV2D.Navigator.prototype.syncStation = function (station) {\n  for (var i = this.stationList.length - 1; i >= 0; i--) {\n    var del = true;\n\n    for (var j = 0; j < station.length; j++) {\n      if (this.stationList[i].info.id == station[j].id) {\n        del = false;\n      }\n    }\n\n    if (del) {\n      this.rootObject.removeChild(this.stationList[i].marker);\n      this.rootObject.removeChild(this.stationList[i].text);\n      this.stationList.splice(i, 1);\n    }\n  }\n\n  for (var i = station.length - 1; i >= 0; i--) {\n    var available = false;\n\n    for (var j = 0; j < this.stationList.length; j++) {\n      if (this.stationList[j].info.id == station[i].id) {\n        available = true;\n      }\n    }\n\n    if (available == false) {\n      var stationMarker = new ROS2D.NavigationImage({\n        size: 0.52,\n        image: this.imageStationArrow,\n        alpha: 0.8,\n        pulse: true\n      });\n      var thetaDegrees = station[i].degrees;\n      stationMarker.x = station[i].pose.position.x;\n      stationMarker.y = -station[i].pose.position.y;\n      stationMarker.rotation = thetaDegrees; // this.rootObject.addChildAt(stationMarker, this.rootObject.getChildIndex(this.robotMarker));\n\n      var text = new createjs.Text(station[i].name, \"0.01rem Helvetica\", \"#ff7700\");\n      text.x = stationMarker.x - text.getBounds().width / 2;\n      text.y = stationMarker.y - 0.45;\n      this.rootObject.addChildAt(stationMarker, this.rootObject.getChildIndex(this.robotMarker));\n      this.rootObject.addChildAt(text, this.rootObject.getChildIndex(this.robotMarker));\n      this.stationList.push({\n        info: station[i],\n        marker: stationMarker,\n        text: text\n      });\n    }\n  }\n};\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A OccupancyGridClientNav uses an OccupancyGridClient to create a map for use with a Navigator.\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * topic (optional) - the map topic to listen to\n *   * rootObject (optional) - the root object to add this marker to\n *   * continuous (optional) - if the map should be continuously loaded (e.g., for SLAM)\n *   * serverName (optional) - the action server name to use for navigation, like '/move_base'\n *   * actionName (optional) - the navigation action name, like 'move_base_msgs/MoveBaseAction'\n *   * rootObject (optional) - the root object to add the click listeners to and render robot markers to\n *   * withOrientation (optional) - if the Navigator should consider the robot orientation (default: false)\n *   * viewer - the main viewer to render to\n */\n\n\nNAV2D.OccupancyGridClientNav = function (options) {\n  var that = this;\n  options = options || {};\n  this.ros = options.ros;\n  var topic = options.topic || '/map';\n  var topic_costmap = options.topic_costmap || '/move_base/local_costmap/costmap';\n  var continuous = options.continuous;\n  this.serverName = options.serverName || '/move_base';\n  this.actionName = options.actionName || 'move_base_msgs/MoveBaseAction';\n  this.rootObject = options.rootObject || new createjs.Container();\n  this.viewer = options.viewer;\n  this.panView = options.panView;\n  this.zoomView = options.zoomView;\n  this.withOrientation = options.withOrientation || false;\n  this.command = options.command || 'none';\n  var imageRobot = options.imageRobot;\n  var imageGoalArrow = options.imageGoalArrow;\n  var imageStationArrow = options.imageStationArrow;\n  this.navigator = null;\n  that.disableScale = false;\n  that.scale = {\n    width: 1,\n    height: 1\n  };\n  that.shift = {\n    x: 0,\n    y: 0\n  }; // setup a client to get the map\n\n  var client = new ROS2D.OccupancyGridClient({\n    ros: this.ros,\n    rootObject: this.rootObject,\n    continuous: continuous,\n    topic: topic,\n    topic_costmap: topic_costmap\n  });\n  client.on('change', function () {\n    // scale the viewer to fit the map\n    if (!that.disableScale) {\n      that.scale.width = client.currentGrid.width;\n      that.scale.height = client.currentGrid.height;\n      that.shift.x = client.currentGrid.pose.position.x;\n      that.shift.y = client.currentGrid.pose.position.y; // that.viewer.scaleToDimensions(client.currentGrid.width, client.currentGrid.height);\n      // that.viewer.shift(client.currentGrid.pose.position.x, client.currentGrid.pose.position.y);\n\n      that.viewer.fillFrame(client.currentGrid.width, client.currentGrid.height, client.currentGrid.pose.position.x, client.currentGrid.pose.position.y);\n    }\n  });\n  that.navigator = new NAV2D.Navigator({\n    ros: that.ros,\n    serverName: that.serverName,\n    actionName: that.actionName,\n    rootObject: that.rootObject,\n    withOrientation: true,\n    imageRobot: imageRobot,\n    imageGoalArrow: imageGoalArrow,\n    imageStationArrow: imageStationArrow,\n    command: this.command,\n    onSetGoal: options.onSetGoal,\n    onAddStation: options.onAddStation,\n    onClickStation: options.onClickStation\n  });\n  that.registerMouseHandlers();\n};\n\nNAV2D.OccupancyGridClientNav.prototype.registerMouseHandlers = function () {\n  var that = this; // Setup mouse event handlers\n\n  var mouseDown = false;\n  var zoomKey = false;\n  var panKey = false;\n  var startPos = new ROSLIB.Vector3();\n  that.viewer.scene.addEventListener('stagemousedown', function (event) {\n    if (event.nativeEvent.ctrlKey === true) {\n      zoomKey = true;\n      that.zoomView.startZoom(event.stageX, event.stageY);\n    } else if (event.nativeEvent.shiftKey === true) {\n      panKey = true;\n      that.panView.startPan(event.stageX, event.stageY);\n    } // else {\n    //   var pos = that.viewer.scene.globalToRos(event.stageX, event.stageY);\n    //   navGoal.startGoalSelection(pos);\n    // }\n\n\n    startPos.x = event.stageX;\n    startPos.y = event.stageY;\n    mouseDown = true;\n  });\n  that.viewer.scene.addEventListener('stagemousemove', function (event) {\n    if (mouseDown === true) {\n      if (zoomKey === true) {\n        var dy = event.stageY - startPos.y;\n        var zoom = 1 + 10 * Math.abs(dy) / that.viewer.scene.canvas.clientHeight;\n        if (dy < 0) zoom = 1 / zoom;\n        that.zoomView.zoom(zoom);\n      } else if (panKey === true) {\n        that.panView.pan(event.stageX, event.stageY);\n      } // else {\n      //   var pos = that.viewer.scene.globalToRos(event.stageX, event.stageY);\n      //   navGoal.orientGoalSelection(pos);\n      // }\n\n\n      that.disableScale = true;\n    }\n  });\n  that.viewer.scene.addEventListener('stagemouseup', function (event) {\n    if (mouseDown === true) {\n      if (zoomKey === true) {\n        zoomKey = false;\n      } else if (panKey === true) {\n        panKey = false;\n      } // else {\n      //   var pos = that.viewer.scene.globalToRos(event.stageX, event.stageY);\n      //   var goalPose = navGoal.endGoalSelection(pos);\n      //   navGoal.sendGoal(goalPose);\n      // }\n\n\n      mouseDown = false;\n    }\n  });\n  that.viewer.scene.addEventListener('dblclick', event => {\n    that.disableScale = false; // that.viewer.scaleToDimensions(that.scale.width, that.scale.height);\n    // that.viewer.shift(that.shift.x, that.shift.y);\n\n    that.viewer.fillFrame(that.scale.width, that.scale.height, that.shift.x, that.shift.y);\n  });\n};\n\nNAV2D.OccupancyGridClientNav.prototype.setCommand = function (command) {\n  // this.command = command;\n  this.navigator.setCommand(command);\n};\n\nNAV2D.OccupancyGridClientNav.prototype.setStationName = function (stationName) {\n  this.navigator.setStationName(stationName);\n};\n\nNAV2D.OccupancyGridClientNav.prototype.syncStation = function (station) {\n  this.navigator.syncStation(station);\n};\n\nexport default NAV2D;","map":{"version":3,"sources":["/home/binhlee/Desktop/kobuki_web_source/react-nav2djs-0.0.3/package/es/vendor/nav2d.js"],"names":["ROS2D","ROSLIB","NAV2D","REVISION","ImageMapClientNav","options","that","ros","topic","image","serverName","actionName","rootObject","createjs","Container","viewer","withOrientation","navigator","client","ImageMapClient","on","Navigator","imageRobot","imageGoalArrow","imageStationArrow","command","onAddStation","onClickStation","onSetGoal","stationName","stationList","actionClient","ActionClient","sendGoal","pose","goal","Goal","goalMessage","target_pose","header","frame_id","send","goalMarker","NavigationImage","size","alpha","x","position","y","rotation","stage","rosQuaternionToGlobalTheta","orientation","scaleX","scaleY","addChild","removeChild","Stage","getStage","robotMarker","visible","zIndex","initScaleSet","sortBy","a","b","poseListener","Topic","name","messageType","throttle_rate","subscribe","positionVec3","thetaRadians","thetaDegrees","orientationMarkerGoal","pulse","onload","orientationMarkerStation","targetMarker","mouseDown","mouseMove","xDelta","yDelta","zi","mouseEventHandler","event","mouseState","globalToRos","stageX","stageY","Vector3","currentPos","currentPosVec3","targetIndex","forEach","item","index","Math","abs","marker","info","id","splice","atan2","PI","addChildAt","getChildIndex","goalPos","goalPosVec3","qz","sin","qw","cos","Quaternion","z","w","Pose","obj","degrees","Date","now","toString","addEventListener","prototype","setCommand","setStationName","syncStation","station","i","length","del","j","text","available","stationMarker","Text","getBounds","width","push","OccupancyGridClientNav","topic_costmap","continuous","panView","zoomView","disableScale","scale","height","shift","OccupancyGridClient","currentGrid","fillFrame","registerMouseHandlers","zoomKey","panKey","startPos","scene","nativeEvent","ctrlKey","startZoom","shiftKey","startPan","dy","zoom","canvas","clientHeight","pan"],"mappings":"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","sourcesContent":["import 'latest-createjs';\nimport ROS2D from './ros2d';\nimport ROSLIB from 'roslib';\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n * @author Lars Kunze - l.kunze@cs.bham.ac.uk\n */\n\nvar NAV2D = NAV2D || {\n  REVISION: '0.3.0'\n};\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A OccupancyGridClientNav uses an OccupancyGridClient to create a map for use with a Navigator.\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * topic (optional) - the map meta data topic to listen to\n *   * image - the URL of the image to render\n *   * serverName (optional) - the action server name to use for navigation, like '/move_base'\n *   * actionName (optional) - the navigation action name, like 'move_base_msgs/MoveBaseAction'\n *   * rootObject (optional) - the root object to add the click listeners to and render robot markers to\n *   * withOrientation (optional) - if the Navigator should consider the robot orientation (default: false)\n *   * viewer - the main viewer to render to\n */\nNAV2D.ImageMapClientNav = function (options) {\n  var that = this;\n  options = options || {};\n  this.ros = options.ros;\n  var topic = options.topic || '/map_metadata';\n  var image = options.image;\n  this.serverName = options.serverName || '/move_base';\n  this.actionName = options.actionName || 'move_base_msgs/MoveBaseAction';\n  this.rootObject = options.rootObject || new createjs.Container();\n  this.viewer = options.viewer;\n  this.withOrientation = options.withOrientation || false;\n\n  this.navigator = null;\n\n  // setup a client to get the map\n  var client = new ROS2D.ImageMapClient({\n    ros: this.ros,\n    rootObject: this.rootObject,\n    topic: topic,\n    image: image\n  });\n  client.on('change', function () {\n    that.navigator = new NAV2D.Navigator({\n      ros: that.ros,\n      serverName: that.serverName,\n      actionName: that.actionName,\n      rootObject: that.rootObject,\n      withOrientation: that.withOrientation\n    });\n\n    // scale the viewer to fit the map\n    // that.viewer.scaleToDimensions(client.currentImage.width, client.currentImage.height);\n    // that.viewer.shift(client.currentImage.pose.position.x, client.currentImage.pose.position.y);\n  });\n};\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n * @author Lars Kunze - l.kunze@cs.bham.ac.uk\n */\n\n/**\n * A navigator can be used to add click-to-navigate options to an object. If\n * withOrientation is set to true, the user can also specify the orientation of\n * the robot by clicking at the goal position and pointing into the desired\n * direction (while holding the button pressed).\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * serverName (optional) - the action server name to use for navigation, like '/move_base'\n *   * actionName (optional) - the navigation action name, like 'move_base_msgs/MoveBaseAction'\n *   * rootObject (optional) - the root object to add the click listeners to and render robot markers to\n *   * withOrientation (optional) - if the Navigator should consider the robot orientation (default: false)\n */\nNAV2D.Navigator = function (options) {\n  var that = this;\n  options = options || {};\n  var ros = options.ros;\n  this.imageRobot = options.imageRobot;\n  this.imageGoalArrow = options.imageGoalArrow;\n  this.imageStationArrow = options.imageStationArrow;\n  var serverName = options.serverName || '/move_base';\n  var actionName = options.actionName || 'move_base_msgs/MoveBaseAction';\n  var withOrientation = options.withOrientation || false;\n  this.rootObject = options.rootObject || new createjs.Container();\n  this.command = options.command || 'none';\n  this.onAddStation = options.onAddStation;\n  this.onClickStation = options.onClickStation;\n  this.onSetGoal = options.onSetGoal;\n  this.stationName = options.stationName || 'NoName';\n  this.stationList = [];\n\n  // setup the actionlib client\n  var actionClient = new ROSLIB.ActionClient({\n    ros: ros,\n    actionName: actionName,\n    serverName: serverName\n  });\n\n  /**\n   * Send a goal to the navigation stack with the given pose.\n   *\n   * @param pose - the goal pose\n   */\n  function sendGoal(pose) {\n    // create a goal\n    var goal = new ROSLIB.Goal({\n      actionClient: actionClient,\n      goalMessage: {\n        target_pose: {\n          header: {\n            frame_id: '/map'\n          },\n          pose: pose\n        }\n      }\n    });\n    goal.send();\n\n    // create a marker for the goal\n    var goalMarker = new ROS2D.NavigationImage({\n      size: 0.5,\n      image: that.imageGoalArrow,\n      alpha: 0.9,\n    });\n    goalMarker.x = pose.position.x;\n    goalMarker.y = -pose.position.y;\n    goalMarker.rotation = stage.rosQuaternionToGlobalTheta(pose.orientation);\n    goalMarker.scaleX = 1.0 / stage.scaleX;\n    goalMarker.scaleY = 1.0 / stage.scaleY;\n    that.rootObject.addChild(goalMarker);\n\n    goal.on('result', function () {\n      that.rootObject.removeChild(goalMarker);\n    });\n  }\n\n  // get a handle to the stage\n  var stage;\n  if (that.rootObject instanceof createjs.Stage) {\n    stage = that.rootObject;\n  } else {\n    stage = that.rootObject.getStage();\n  }\n\n  // marker for the robot\n  this.robotMarker = new ROS2D.NavigationImage({\n    size: 0.5,\n    image: that.imageRobot,\n    alpha: 0.9,\n  });\n  // wait for a pose to come in first\n  this.robotMarker.visible = false;\n  this.robotMarker.zIndex = 0;\n  this.rootObject.addChild(this.robotMarker);\n  var initScaleSet = false;\n\n  // setup a listener for the robot pose\n  var sortBy = function(a, b) { return b.zIndex - a.zIndex; };\n  var poseListener = new ROSLIB.Topic({\n    ros: ros,\n    name: '/robot_pose',\n    messageType: 'geometry_msgs/PoseStamped',\n    throttle_rate: 100\n  });\n  poseListener.subscribe(function (pose) {\n    // update the robots position on the map\n    pose = pose.pose;\n    // console.log(pose.position.x);\n    that.robotMarker.x = pose.position.x;\n    that.robotMarker.y = -pose.position.y;\n\n    // change the angle\n    that.robotMarker.rotation = stage.rosQuaternionToGlobalTheta(pose.orientation);\n\n    that.robotMarker.visible = true;\n    // that.rootObject.setChildIndex(that.rootObject.numChildren());\n  });\n\n\n  // withOrientation === true\n  // setup a click-and-point listener (with orientation)\n  var position = null;\n  var positionVec3 = null;\n  var thetaRadians = 0;\n  var thetaDegrees = 0;\n  this.orientationMarkerGoal = new ROS2D.NavigationImage({\n    size: 0.52,\n    image: that.imageGoalArrow,\n    alpha: 0.8,\n    pulse: true,\n    onload: true,\n  });\n  this.orientationMarkerGoal.visible = false;\n\n  var orientationMarkerStation = null;\n  // orientationMarkerStation.visible = false;\n\n  var targetMarker = this.orientationMarkerGoal;\n\n  var mouseDown = false;\n  var mouseMove = false;\n  var xDelta = 0;\n  var yDelta = 0;\n  var zi = 1;\n\n  var mouseEventHandler = function mouseEventHandler(event, mouseState) {\n\n    if (mouseState === 'down') {\n      // get position when mouse button is pressed down\n      position = stage.globalToRos(event.stageX, event.stageY);\n      positionVec3 = new ROSLIB.Vector3(position);\n      mouseDown = true;\n      mouseMove = false;\n      if (that.command == 'SetGoal') {\n        targetMarker = that.orientationMarkerGoal;\n      } else if (that.command == 'AddStation') {\n        orientationMarkerStation =  new ROS2D.NavigationImage({\n          size: 0.52,\n          image: that.imageStationArrow,\n          alpha: 0.8,\n          pulse: true,\n          onload: true,\n        });\n        targetMarker = orientationMarkerStation;\n      } else {\n        mouseDown = false;\n        var currentPos = stage.globalToRos(event.stageX, event.stageY);\n        var currentPosVec3 = new ROSLIB.Vector3(currentPos);\n        currentPosVec3.y *= -1;\n        var targetIndex = -1;\n        that.stationList.forEach((item, index) => {\n          if (Math.abs(currentPosVec3.x - item.marker.x) < 0.2 && Math.abs(currentPosVec3.y - item.marker.y) < 0.2) {\n            // if (that.command == 'DeleteStation') {\n            //   that.rootObject.removeChild(item.marker);\n            //   that.rootObject.removeChild(item.label);\n            //   targetIndex = index;\n            // }\n            if (that.onClickStation) {\n              that.onClickStation(item.info.id);\n            }\n          }\n        });\n        if (targetIndex >= 0) {\n          that.stationList.splice(targetIndex, 1);\n        }\n        return;\n      }\n    } else if (mouseDown && mouseState === 'move') {\n      // remove obsolete orientation marker\n      that.rootObject.removeChild(targetMarker);\n      mouseMove = true;\n      var currentPos = stage.globalToRos(event.stageX, event.stageY);\n      var currentPosVec3 = new ROSLIB.Vector3(currentPos);\n      targetMarker.visible = true;\n\n      xDelta = currentPosVec3.x - positionVec3.x;\n      yDelta = currentPosVec3.y - positionVec3.y;\n\n      thetaRadians = Math.atan2(xDelta, yDelta);\n\n      thetaDegrees = thetaRadians * (180.0 / Math.PI);\n\n      if (thetaDegrees >= 0 && thetaDegrees <= 180) {\n        thetaDegrees += 270;\n      } else {\n        thetaDegrees -= 90;\n      }\n\n      targetMarker.x = positionVec3.x;\n      targetMarker.y = -positionVec3.y;\n      targetMarker.rotation = thetaDegrees;\n      targetMarker.zIndex = zi;\n      zi++;\n\n      that.rootObject.addChildAt(targetMarker, that.rootObject.getChildIndex(that.robotMarker));\n    } else if (mouseDown && mouseState === 'up') {\n      mouseDown = false;\n\n      var goalPos = stage.globalToRos(event.stageX, event.stageY);\n\n      var goalPosVec3 = new ROSLIB.Vector3(goalPos);\n\n      xDelta = goalPosVec3.x - positionVec3.x;\n      yDelta = goalPosVec3.y - positionVec3.y;\n\n      thetaRadians = Math.atan2(xDelta, yDelta);\n\n      if (thetaRadians >= 0 && thetaRadians <= Math.PI) {\n        thetaRadians += 3 * Math.PI / 2;\n      } else {\n        thetaRadians -= Math.PI / 2;\n      }\n\n      var qz = Math.sin(-thetaRadians / 2.0);\n      var qw = Math.cos(-thetaRadians / 2.0);\n\n      var orientation = new ROSLIB.Quaternion({ x: 0, y: 0, z: qz, w: qw });\n\n      var pose = new ROSLIB.Pose({\n        position: positionVec3,\n        orientation: orientation\n      });\n      // send the goal\n      // sendGoal(pose);\n      if (mouseMove) {\n        mouseMove = false;\n        if (that.command == 'SetGoal') {\n          if (that.onSetGoal) {\n            that.onSetGoal(targetMarker, pose);\n          }\n        } else if (that.command == 'AddStation') {\n/*\n          var text = new createjs.Text(that.stationName, \"0.01rem Helvetica\", \"#ff7700\");\n          text.x = targetMarker.x - text.getBounds().width / 2;\n          text.y = targetMarker.y - 0.45;\n          that.rootObject.removeChild(targetMarker);\n          that.rootObject.addChildAt(text, that.rootObject.getChildIndex(this.robotMarker));\n          var newStationItem = {\n            marker: orientationMarkerStation,\n            label: text,\n          }\n          stationList.push(newStationItem);\n*/\n          that.rootObject.removeChild(targetMarker);\n          if (that.onAddStation) {\n            that.onAddStation({\n              name: that.stationName,\n              obj: targetMarker,\n              pose: pose,\n              degrees: thetaDegrees,\n              id: Date.now().toString(),\n            });\n          }\n        }\n      }\n    }\n  };\n\n  this.rootObject.addEventListener('stagemousedown', function (event) {\n    mouseEventHandler(event, 'down');\n  });\n\n  this.rootObject.addEventListener('stagemousemove', function (event) {\n    mouseEventHandler(event, 'move');\n  });\n\n  this.rootObject.addEventListener('stagemouseup', function (event) {\n    mouseEventHandler(event, 'up');\n  });\n\n  // this.rootObject.addEventListener('dblclick', function (event) {\n  //   mouseEventHandler(event, 'dbclick');\n  // });\n};\n\nNAV2D.Navigator.prototype.setCommand = function (command) {\n  this.command = command;\n  if (this.command == 'CancelGoal') {\n    this.rootObject.removeChild(this.orientationMarkerGoal);\n  }\n}\n\nNAV2D.Navigator.prototype.setStationName = function (stationName) {\n  this.stationName = stationName;\n}\n\nNAV2D.Navigator.prototype.syncStation = function (station) {\n  for (var i = this.stationList.length - 1; i >= 0; i--) {\n    var del = true;\n    for (var j = 0; j < station.length; j++) {\n      if (this.stationList[i].info.id == station[j].id) {\n        del = false;\n      }\n    }\n    if (del) {\n      this.rootObject.removeChild(this.stationList[i].marker);\n      this.rootObject.removeChild(this.stationList[i].text);\n      this.stationList.splice(i, 1);\n    }\n  }\n  for (var i = station.length - 1; i >= 0; i--) {\n    var available = false;\n    for (var j = 0; j < this.stationList.length; j++) {\n      if (this.stationList[j].info.id == station[i].id) {\n        available = true;\n      }\n    }\n    if (available == false) {\n\n      var stationMarker =  new ROS2D.NavigationImage({\n        size: 0.52,\n        image: this.imageStationArrow,\n        alpha: 0.8,\n        pulse: true,\n      });\n\n      var thetaDegrees = station[i].degrees;\n\n      stationMarker.x = station[i].pose.position.x;\n      stationMarker.y = -station[i].pose.position.y;\n      stationMarker.rotation = thetaDegrees;\n\n      // this.rootObject.addChildAt(stationMarker, this.rootObject.getChildIndex(this.robotMarker));\n\n      var text = new createjs.Text(station[i].name, \"0.01rem Helvetica\", \"#ff7700\");\n      text.x = stationMarker.x - text.getBounds().width / 2;\n      text.y = stationMarker.y - 0.45;\n      this.rootObject.addChildAt(stationMarker, this.rootObject.getChildIndex(this.robotMarker));\n      this.rootObject.addChildAt(text, this.rootObject.getChildIndex(this.robotMarker));\n      this.stationList.push({\n        info: station[i],\n        marker: stationMarker,\n        text: text,\n      });\n    }\n  }\n}\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A OccupancyGridClientNav uses an OccupancyGridClient to create a map for use with a Navigator.\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * topic (optional) - the map topic to listen to\n *   * rootObject (optional) - the root object to add this marker to\n *   * continuous (optional) - if the map should be continuously loaded (e.g., for SLAM)\n *   * serverName (optional) - the action server name to use for navigation, like '/move_base'\n *   * actionName (optional) - the navigation action name, like 'move_base_msgs/MoveBaseAction'\n *   * rootObject (optional) - the root object to add the click listeners to and render robot markers to\n *   * withOrientation (optional) - if the Navigator should consider the robot orientation (default: false)\n *   * viewer - the main viewer to render to\n */\nNAV2D.OccupancyGridClientNav = function (options) {\n  var that = this;\n  options = options || {};\n  this.ros = options.ros;\n  var topic = options.topic || '/map';\n  var topic_costmap = options.topic_costmap || '/move_base/local_costmap/costmap';\n  var continuous = options.continuous;\n  this.serverName = options.serverName || '/move_base';\n  this.actionName = options.actionName || 'move_base_msgs/MoveBaseAction';\n  this.rootObject = options.rootObject || new createjs.Container();\n  this.viewer = options.viewer;\n  this.panView = options.panView;\n  this.zoomView = options.zoomView;\n  this.withOrientation = options.withOrientation || false;\n  this.command = options.command || 'none';\n  var imageRobot = options.imageRobot;\n  var imageGoalArrow = options.imageGoalArrow;\n  var imageStationArrow = options.imageStationArrow;\n\n  this.navigator = null;\n\n  that.disableScale = false;\n  that.scale = {\n    width: 1,\n    height: 1,\n  };\n  that.shift = {\n    x: 0,\n    y: 0,\n  };\n\n  // setup a client to get the map\n  var client = new ROS2D.OccupancyGridClient({\n    ros: this.ros,\n    rootObject: this.rootObject,\n    continuous: continuous,\n    topic: topic,\n    topic_costmap: topic_costmap\n  });\n  client.on('change', function () {\n\n    // scale the viewer to fit the map\n    if (!that.disableScale) {\n      that.scale.width = client.currentGrid.width;\n      that.scale.height = client.currentGrid.height;\n      that.shift.x = client.currentGrid.pose.position.x;\n      that.shift.y = client.currentGrid.pose.position.y;\n      // that.viewer.scaleToDimensions(client.currentGrid.width, client.currentGrid.height);\n      // that.viewer.shift(client.currentGrid.pose.position.x, client.currentGrid.pose.position.y);\n      that.viewer.fillFrame(client.currentGrid.width, client.currentGrid.height, client.currentGrid.pose.position.x, client.currentGrid.pose.position.y);\n    }\n\n  });\n  that.navigator = new NAV2D.Navigator({\n    ros: that.ros,\n    serverName: that.serverName,\n    actionName: that.actionName,\n    rootObject: that.rootObject,\n    withOrientation: true,\n    imageRobot: imageRobot,\n    imageGoalArrow: imageGoalArrow,\n    imageStationArrow: imageStationArrow,\n    command: this.command,\n    onSetGoal: options.onSetGoal,\n    onAddStation: options.onAddStation,\n    onClickStation: options.onClickStation,\n  });\n  that.registerMouseHandlers();\n};\n\n\nNAV2D.OccupancyGridClientNav.prototype.registerMouseHandlers = function () {\n  var that = this;\n  // Setup mouse event handlers\n  var mouseDown = false;\n  var zoomKey = false;\n  var panKey = false;\n  var startPos = new ROSLIB.Vector3();\n  that.viewer.scene.addEventListener('stagemousedown', function (event) {\n    if (event.nativeEvent.ctrlKey === true) {\n      zoomKey = true;\n      that.zoomView.startZoom(event.stageX, event.stageY);\n    }\n    else if (event.nativeEvent.shiftKey === true) {\n      panKey = true;\n      that.panView.startPan(event.stageX, event.stageY);\n    }\n    // else {\n    //   var pos = that.viewer.scene.globalToRos(event.stageX, event.stageY);\n    //   navGoal.startGoalSelection(pos);\n    // }\n    startPos.x = event.stageX;\n    startPos.y = event.stageY;\n    mouseDown = true;\n  });\n\n  that.viewer.scene.addEventListener('stagemousemove', function (event) {\n    if (mouseDown === true) {\n      if (zoomKey === true) {\n        var dy = event.stageY - startPos.y;\n        var zoom = 1 + 10 * Math.abs(dy) / that.viewer.scene.canvas.clientHeight;\n        if (dy < 0)\n          zoom = 1 / zoom;\n        that.zoomView.zoom(zoom);\n      }\n      else if (panKey === true) {\n        that.panView.pan(event.stageX, event.stageY);\n      }\n      // else {\n      //   var pos = that.viewer.scene.globalToRos(event.stageX, event.stageY);\n      //   navGoal.orientGoalSelection(pos);\n      // }\n      that.disableScale = true;\n    }\n  });\n\n  that.viewer.scene.addEventListener('stagemouseup', function (event) {\n    if (mouseDown === true) {\n      if (zoomKey === true) {\n        zoomKey = false;\n      }\n      else if (panKey === true) {\n        panKey = false;\n      }\n      // else {\n      //   var pos = that.viewer.scene.globalToRos(event.stageX, event.stageY);\n      //   var goalPose = navGoal.endGoalSelection(pos);\n      //   navGoal.sendGoal(goalPose);\n      // }\n      mouseDown = false;\n    }\n  });\n\n  that.viewer.scene.addEventListener('dblclick', (event) => {\n    that.disableScale = false;\n    // that.viewer.scaleToDimensions(that.scale.width, that.scale.height);\n    // that.viewer.shift(that.shift.x, that.shift.y);\n    that.viewer.fillFrame(that.scale.width, that.scale.height, that.shift.x, that.shift.y);\n  });\n\n}\n\n\nNAV2D.OccupancyGridClientNav.prototype.setCommand = function (command) {\n  // this.command = command;\n  this.navigator.setCommand(command);\n}\n\nNAV2D.OccupancyGridClientNav.prototype.setStationName = function (stationName) {\n  this.navigator.setStationName(stationName);\n}\n\nNAV2D.OccupancyGridClientNav.prototype.syncStation = function (station) {\n  this.navigator.syncStation(station);\n}\n\nexport default NAV2D;"]},"metadata":{},"sourceType":"module"}