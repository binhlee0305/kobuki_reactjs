{"ast":null,"code":"import 'latest-createjs';\nimport ROSLIB from 'roslib';\nimport EventEmitter2 from 'eventemitter2';\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\nvar ROS2D = ROS2D || {\n  REVISION: '0.9.0'\n}; // convert the given global Stage coordinates to ROS coordinates\n\ncreatejs.Stage.prototype.globalToRos = function (x, y) {\n  var rosX = (x - this.x) / this.scaleX;\n  var rosY = (this.y - y) / this.scaleY;\n  return new ROSLIB.Vector3({\n    x: rosX,\n    y: rosY\n  });\n}; // convert the given ROS coordinates to global Stage coordinates\n\n\ncreatejs.Stage.prototype.rosToGlobal = function (pos) {\n  var x = pos.x * this.scaleX + this.x;\n  var y = pos.y * this.scaleY + this.y;\n  return {\n    x: x,\n    y: y\n  };\n}; // convert a ROS quaternion to theta in degrees\n\n\ncreatejs.Stage.prototype.rosQuaternionToGlobalTheta = function (orientation) {\n  // See https://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles#Rotation_matrices\n  // here we use [x y z] = R * [1 0 0]\n  var q0 = orientation.w;\n  var q1 = orientation.x;\n  var q2 = orientation.y;\n  var q3 = orientation.z; // Canvas rotation is clock wise and in degrees\n\n  return -Math.atan2(2 * (q0 * q3 + q1 * q2), 1 - 2 * (q2 * q2 + q3 * q3)) * 180.0 / Math.PI;\n};\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * An image map is a PNG image scaled to fit to the dimensions of a OccupancyGrid.\n *\n * @constructor\n * @param options - object with following keys:\n *   * message - the occupancy grid map meta data message\n *   * image - the image URL to load\n */\n\n\nROS2D.ImageMap = function (options) {\n  options = options || {};\n  var message = options.message;\n  var image = options.image; // save the metadata we need\n\n  this.pose = new ROSLIB.Pose({\n    position: message.origin.position,\n    orientation: message.origin.orientation\n  }); // set the size\n\n  this.width = message.width;\n  this.height = message.height; // create the bitmap\n\n  createjs.Bitmap.call(this, image); // change Y direction\n\n  this.y = -this.height * message.resolution; // scale the image\n\n  this.scaleX = message.resolution;\n  this.scaleY = message.resolution;\n  this.width *= this.scaleX;\n  this.height *= this.scaleY; // set the pose\n\n  this.x += this.pose.position.x;\n  this.y -= this.pose.position.y;\n};\n\nROS2D.ImageMap.prototype.__proto__ = createjs.Bitmap.prototype;\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A image map is a PNG image scaled to fit to the dimensions of a OccupancyGrid.\n *\n * Emits the following events:\n *   * 'change' - there was an update or change in the map\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * topic (optional) - the map meta data topic to listen to\n *   * image - the image URL to load\n *   * rootObject (optional) - the root object to add this marker to\n */\n\nROS2D.ImageMapClient = function (options) {\n  var that = this;\n  options = options || {};\n  var ros = options.ros;\n  var topic = options.topic || '/map_metadata';\n  this.image = options.image;\n  this.rootObject = options.rootObject || new createjs.Container(); // create an empty shape to start with\n\n  this.currentImage = new createjs.Shape(); // subscribe to the topic\n\n  var rosTopic = new ROSLIB.Topic({\n    ros: ros,\n    name: topic,\n    messageType: 'nav_msgs/MapMetaData'\n  });\n  rosTopic.subscribe(function (message) {\n    // we only need this once\n    rosTopic.unsubscribe(); // create the image\n\n    that.currentImage = new ROS2D.ImageMap({\n      message: message,\n      image: that.image\n    });\n    that.rootObject.addChild(that.currentImage); // work-around for a bug in easeljs -- needs a second object to render correctly\n\n    that.rootObject.addChild(new ROS2D.Grid({\n      size: 1\n    }));\n    that.emit('change');\n  });\n};\n\nROS2D.ImageMapClient.prototype.__proto__ = EventEmitter2.prototype;\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * An OccupancyGrid can convert a ROS occupancy grid message into a createjs Bitmap object.\n *\n * @constructor\n * @param options - object with following keys:\n *   * message - the occupancy grid message\n */\n\nROS2D.OccupancyGrid = function (options) {\n  options = options || {};\n  var message = options.message; // internal drawing canvas\n\n  var canvas = document.createElement('canvas');\n  var context = canvas.getContext('2d'); // save the metadata we need\n\n  this.pose = new ROSLIB.Pose({\n    position: message.info.origin.position,\n    orientation: message.info.origin.orientation\n  }); // set the size\n\n  this.width = message.info.width;\n  this.height = message.info.height;\n  canvas.width = this.width;\n  canvas.height = this.height;\n  var imageData = context.createImageData(this.width, this.height);\n\n  for (var row = 0; row < this.height; row++) {\n    for (var col = 0; col < this.width; col++) {\n      // determine the index into the map data\n      var mapI = col + (this.height - row - 1) * this.width; // determine the value\n\n      var data = message.data[mapI];\n      var val;\n\n      if (data === 100) {\n        val = 0;\n      } else if (data === 0) {\n        val = 255;\n      } else {\n        val = 127;\n      } // determine the index into the image data array\n\n\n      var i = (col + row * this.width) * 4; // r\n\n      imageData.data[i] = val; // g\n\n      imageData.data[++i] = val; // b\n\n      imageData.data[++i] = val; // a\n\n      imageData.data[++i] = 255;\n    }\n  }\n\n  context.putImageData(imageData, 0, 0); // create the bitmap\n\n  createjs.Bitmap.call(this, canvas); // change Y direction\n\n  this.y = -this.height * message.info.resolution; // scale the image\n\n  this.scaleX = message.info.resolution;\n  this.scaleY = message.info.resolution;\n  this.width *= this.scaleX;\n  this.height *= this.scaleY; // set the pose\n\n  this.x += this.pose.position.x;\n  this.y -= this.pose.position.y;\n  this.alpha = options.alpha || 1;\n};\n\nROS2D.OccupancyGrid.prototype.__proto__ = createjs.Bitmap.prototype;\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A map that listens to a given occupancy grid topic.\n *\n * Emits the following events:\n *   * 'change' - there was an update or change in the map\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * topic (optional) - the map topic to listen to\n *   * rootObject (optional) - the root object to add this marker to\n *   * continuous (optional) - if the map should be continuously loaded (e.g., for SLAM)\n */\n\nROS2D.OccupancyGridClient = function (options) {\n  var that = this;\n  options = options || {};\n  var ros = options.ros;\n  var topic = options.topic || '/map';\n  var topic_costmap = options.topic_costmap || '/move_base_node/global_costmap/costmap';\n  var topic_path = options.topic_path || '/rtabmap/global_path';\n  this.continuous = options.continuous;\n  this.rootObject = options.rootObject || new createjs.Container(); // current grid that is displayed\n  // create an empty shape to start with, so that the order remains correct.\n\n  this.currentGrid = new createjs.Shape();\n  this.rootObject.addChild(this.currentGrid); // work-around for a bug in easeljs -- needs a second object to render correctly\n\n  this.rootObject.addChild(new ROS2D.Grid({\n    size: 100\n  }));\n  this.currentGridCostmap = new createjs.Shape();\n  this.rootObject.addChild(this.currentGridCostmap); // subscribe to the topic\n\n  var rosTopic = new ROSLIB.Topic({\n    ros: ros,\n    name: topic,\n    messageType: 'nav_msgs/OccupancyGrid',\n    compression: 'png'\n  });\n  rosTopic.subscribe(function (message) {\n    // check for an old map\n    var index = null;\n\n    if (that.currentGrid) {\n      index = that.rootObject.getChildIndex(that.currentGrid);\n      that.rootObject.removeChild(that.currentGrid);\n    }\n\n    that.currentGrid = new ROS2D.OccupancyGrid({\n      message: message\n    });\n\n    if (index !== null) {\n      that.rootObject.addChildAt(that.currentGrid, index);\n    } else {\n      that.rootObject.addChild(that.currentGrid);\n    }\n\n    that.emit('change'); // check if we should unsubscribe\n\n    if (!that.continuous) {\n      rosTopic.unsubscribe();\n    }\n  }); // subscribe to the topic\n\n  var rosTopicCostmap = new ROSLIB.Topic({\n    ros: ros,\n    name: topic_costmap,\n    messageType: 'nav_msgs/OccupancyGrid',\n    compression: 'png'\n  });\n  var rosTopicPath = new ROSLIB.Topic({\n    ros: ros,\n    name: topic_path,\n    messageType: 'nav_msgs/nav_msgs/Path',\n    compression: 'png'\n  });\n  rosTopicCostmap.subscribe(function (message) {\n    // check for an old map\n    var index = null;\n\n    if (that.currentGridCostmap) {\n      index = that.rootObject.getChildIndex(that.currentGridCostmap);\n      that.rootObject.removeChild(that.currentGridCostmap);\n    }\n\n    that.currentGridCostmap = new ROS2D.OccupancyGrid({\n      message: message,\n      alpha: 0.5,\n      isCostmap: true\n    });\n\n    if (index !== null) {\n      that.rootObject.addChildAt(that.currentGridCostmap, index);\n    } else {\n      that.rootObject.addChild(that.currentGridCostmap);\n    } // that.emit('change');\n    // check if we should unsubscribe\n\n\n    if (!that.continuous) {\n      rosTopicCostmap.unsubscribe();\n    }\n  });\n  rosTopicPath.subscribe(function (message) {\n    // check for an old map\n    var index = null;\n\n    if (that.currentGridCostmap) {\n      index = that.rootObject.getChildIndex(that.currentGridCostmap);\n      that.rootObject.removeChild(that.currentGridCostmap);\n    }\n\n    that.currentGridCostmap = new ROS2D.OccupancyGrid({\n      message: message,\n      alpha: 0.5,\n      isCostmap: true\n    });\n\n    if (index !== null) {\n      that.rootObject.addChildAt(that.currentGridCostmap, index);\n    } else {\n      that.rootObject.addChild(that.currentGridCostmap);\n    } // that.emit('change');\n    // check if we should unsubscribe\n\n\n    if (!that.continuous) {\n      rosTopicPath.unsubscribe();\n    }\n  });\n};\n\nROS2D.OccupancyGridClient.prototype.__proto__ = EventEmitter2.prototype;\n/**\n * @author Jihoon Lee- jihoonlee.in@gmail.com\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A static map that receives from map_server.\n *\n * Emits the following events:\n *   * 'change' - there was an update or change in the map\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * service (optional) - the map topic to listen to, like '/static_map'\n *   * rootObject (optional) - the root object to add this marker to\n */\n\nROS2D.OccupancyGridSrvClient = function (options) {\n  var that = this;\n  options = options || {};\n  var ros = options.ros;\n  var service = options.service || '/static_map';\n  this.rootObject = options.rootObject || new createjs.Container(); // current grid that is displayed\n\n  this.currentGrid = null; // Setting up to the service\n\n  var rosService = new ROSLIB.Service({\n    ros: ros,\n    name: service,\n    serviceType: 'nav_msgs/GetMap',\n    compression: 'png'\n  });\n  rosService.callService(new ROSLIB.ServiceRequest(), function (response) {\n    // check for an old map\n    if (that.currentGrid) {\n      that.rootObject.removeChild(that.currentGrid);\n    }\n\n    that.currentGrid = new ROS2D.OccupancyGrid({\n      message: response.map\n    });\n    that.rootObject.addChild(that.currentGrid);\n    that.emit('change', that.currentGrid);\n  });\n};\n\nROS2D.OccupancyGridSrvClient.prototype.__proto__ = EventEmitter2.prototype;\n/**\n * @author Bart van Vliet - bart@dobots.nl\n */\n\n/**\n * An arrow with line and triangular head, based on the navigation arrow.\n * Aims to the left at 0 rotation, as would be expected.\n *\n * @constructor\n * @param options - object with following keys:\n *   * size (optional) - the size of the marker\n *   * strokeSize (optional) - the size of the outline\n *   * strokeColor (optional) - the createjs color for the stroke\n *   * fillColor (optional) - the createjs color for the fill\n *   * pulse (optional) - if the marker should \"pulse\" over time\n */\n\nROS2D.ArrowShape = function (options) {\n  var that = this;\n  options = options || {};\n  var size = options.size || 10;\n  var strokeSize = options.strokeSize || 3;\n  var strokeColor = options.strokeColor || createjs.Graphics.getRGB(0, 0, 0);\n  var fillColor = options.fillColor || createjs.Graphics.getRGB(255, 0, 0);\n  var pulse = options.pulse; // draw the arrow\n\n  var graphics = new createjs.Graphics();\n  var headLen = size / 3.0;\n  var headWidth = headLen * 2.0 / 3.0;\n  graphics.setStrokeStyle(strokeSize);\n  graphics.beginStroke(strokeColor);\n  graphics.moveTo(0, 0);\n  graphics.lineTo(size - headLen, 0);\n  graphics.beginFill(fillColor);\n  graphics.moveTo(size, 0);\n  graphics.lineTo(size - headLen, headWidth / 2.0);\n  graphics.lineTo(size - headLen, -headWidth / 2.0);\n  graphics.closePath();\n  graphics.endFill();\n  graphics.endStroke(); // create the shape\n\n  createjs.Shape.call(this, graphics); // check if we are pulsing\n\n  if (pulse) {\n    // have the model \"pulse\"\n    var growCount = 0;\n    var growing = true;\n    createjs.Ticker.addEventListener('tick', function () {\n      if (growing) {\n        that.scaleX *= 1.035;\n        that.scaleY *= 1.035;\n        growing = ++growCount < 10;\n      } else {\n        that.scaleX /= 1.035;\n        that.scaleY /= 1.035;\n        growing = --growCount < 0;\n      }\n    });\n  }\n};\n\nROS2D.ArrowShape.prototype.__proto__ = createjs.Shape.prototype;\n/**\n * @author Raffaello Bonghi - raffaello.bonghi@officinerobotiche.it\n */\n\n/**\n * A Grid object draw in map.\n *\n * @constructor\n * @param options - object with following keys:\n *  * size (optional) - the size of the grid\n *  * cellSize (optional) - the cell size of map\n *  * lineWidth (optional) - the width of the lines in the grid\n */\n\nROS2D.Grid = function (options) {\n  var that = this;\n  options = options || {};\n  var size = options.size || 10;\n  var cellSize = options.cellSize || 0.1;\n  var lineWidth = options.lineWidth || 0.001; // draw the arrow\n\n  var graphics = new createjs.Graphics(); // line width\n\n  graphics.setStrokeStyle(lineWidth * 5);\n  graphics.beginStroke(createjs.Graphics.getRGB(0, 0, 0));\n  graphics.beginFill(createjs.Graphics.getRGB(255, 0, 0));\n  graphics.moveTo(-size * cellSize, 0);\n  graphics.lineTo(size * cellSize, 0);\n  graphics.moveTo(0, -size * cellSize);\n  graphics.lineTo(0, size * cellSize);\n  graphics.endFill();\n  graphics.endStroke();\n  graphics.setStrokeStyle(lineWidth);\n  graphics.beginStroke(createjs.Graphics.getRGB(0, 0, 0));\n  graphics.beginFill(createjs.Graphics.getRGB(255, 0, 0));\n\n  for (var i = -size; i <= size; i++) {\n    graphics.moveTo(-size * cellSize, i * cellSize);\n    graphics.lineTo(size * cellSize, i * cellSize);\n    graphics.moveTo(i * cellSize, -size * cellSize);\n    graphics.lineTo(i * cellSize, size * cellSize);\n  }\n\n  graphics.endFill();\n  graphics.endStroke(); // create the shape\n\n  createjs.Shape.call(this, graphics);\n};\n\nROS2D.Grid.prototype.__proto__ = createjs.Shape.prototype;\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A navigation arrow is a directed triangle that can be used to display orientation.\n *\n * @constructor\n * @param options - object with following keys:\n *   * size (optional) - the size of the marker\n *   * strokeSize (optional) - the size of the outline\n *   * strokeColor (optional) - the createjs color for the stroke\n *   * fillColor (optional) - the createjs color for the fill\n *   * pulse (optional) - if the marker should \"pulse\" over time\n */\n\nROS2D.NavigationArrow = function (options) {\n  var that = this;\n  options = options || {};\n  var size = options.size || 10;\n  var strokeSize = options.strokeSize || 3;\n  var strokeColor = options.strokeColor || createjs.Graphics.getRGB(0, 0, 0);\n  var fillColor = options.fillColor || createjs.Graphics.getRGB(255, 0, 0);\n  var pulse = options.pulse; // draw the arrow\n\n  var graphics = new createjs.Graphics(); // line width\n\n  graphics.setStrokeStyle(strokeSize);\n  graphics.moveTo(-size / 2.0, -size / 2.0);\n  graphics.beginStroke(strokeColor);\n  graphics.beginFill(fillColor);\n  graphics.lineTo(size, 0);\n  graphics.lineTo(-size / 2.0, size / 2.0);\n  graphics.closePath();\n  graphics.endFill();\n  graphics.endStroke(); // create the shape\n\n  createjs.Shape.call(this, graphics); // check if we are pulsing\n\n  if (pulse) {\n    // have the model \"pulse\"\n    var growCount = 0;\n    var growing = true;\n    createjs.Ticker.addEventListener('tick', function () {\n      if (growing) {\n        that.scaleX *= 1.035;\n        that.scaleY *= 1.035;\n        growing = ++growCount < 10;\n      } else {\n        that.scaleX /= 1.035;\n        that.scaleY /= 1.035;\n        growing = --growCount < 0;\n      }\n    });\n  }\n};\n\nROS2D.NavigationArrow.prototype.__proto__ = createjs.Shape.prototype;\n/**\n * @author Inigo Gonzalez - ingonza85@gmail.com\n */\n\n/**\n * A navigation image that can be used to display orientation.\n *\n * @constructor\n * @param options - object with following keys:\n *   * size (optional) - the size of the marker\n *   * image - the image to use as a marker\n *   * pulse (optional) - if the marker should \"pulse\" over time\n */\n\nROS2D.NavigationImage = function (options) {\n  var that = this;\n  options = options || {};\n  var size = options.size || 10;\n  var image_url = options.image;\n  var pulse = options.pulse;\n  var alpha = options.alpha || 1;\n  var onload = options.onload || false;\n  var originals = {};\n\n  var paintImage = function paintImage() {\n    createjs.Bitmap.call(that, image);\n    var scale = calculateScale(size);\n    that.alpha = alpha;\n    that.scaleX = scale;\n    that.scaleY = scale;\n    that.regY = that.image.height / 2;\n    that.regX = that.image.width / 2;\n    originals['rotation'] = that.rotation;\n    Object.defineProperty(that, 'rotation', {\n      get: function () {\n        return originals['rotation'] + 90;\n      },\n      set: function (value) {\n        originals['rotation'] = value;\n      }\n    });\n\n    if (pulse) {\n      // have the model \"pulse\"\n      var growCount = 0;\n      var growing = true;\n      var SCALE_SIZE = 1.005; //1.020\n\n      createjs.Ticker.addEventListener('tick', function () {\n        if (growing) {\n          that.scaleX *= SCALE_SIZE;\n          that.scaleY *= SCALE_SIZE;\n          growing = ++growCount < 10;\n        } else {\n          that.scaleX /= SCALE_SIZE;\n          that.scaleY /= SCALE_SIZE;\n          growing = --growCount < 0;\n        }\n      });\n    }\n  };\n\n  var calculateScale = function calculateScale(_size) {\n    return _size / image.width;\n  };\n\n  var image = new Image();\n  image.onload = paintImage;\n  image.src = image_url;\n\n  if (onload == true) {\n    image.onload = paintImage;\n  } else {\n    paintImage();\n  }\n};\n\nROS2D.NavigationImage.prototype.__proto__ = createjs.Bitmap.prototype;\n/**\n * @author Bart van Vliet - bart@dobots.nl\n */\n\n/**\n * A shape to draw a nav_msgs/Path msg\n *\n * @constructor\n * @param options - object with following keys:\n *   * path (optional) - the initial path to draw\n *   * strokeSize (optional) - the size of the outline\n *   * strokeColor (optional) - the createjs color for the stroke\n */\n\nROS2D.PathShape = function (options) {\n  options = options || {};\n  var path = options.path;\n  this.strokeSize = options.strokeSize || 3;\n  this.strokeColor = options.strokeColor || createjs.Graphics.getRGB(0, 0, 0); // draw the line\n\n  this.graphics = new createjs.Graphics();\n\n  if (path !== null && typeof path !== 'undefined') {\n    this.graphics.setStrokeStyle(this.strokeSize);\n    this.graphics.beginStroke(this.strokeColor);\n    this.graphics.moveTo(path.poses[0].pose.position.x / this.scaleX, path.poses[0].pose.position.y / -this.scaleY);\n\n    for (var i = 1; i < path.poses.length; ++i) {\n      this.graphics.lineTo(path.poses[i].pose.position.x / this.scaleX, path.poses[i].pose.position.y / -this.scaleY);\n    }\n\n    this.graphics.endStroke();\n  } // create the shape\n\n\n  createjs.Shape.call(this, this.graphics);\n};\n/**\n * Set the path to draw\n *\n * @param path of type nav_msgs/Path\n */\n\n\nROS2D.PathShape.prototype.setPath = function (path) {\n  this.graphics.clear();\n\n  if (path !== null && typeof path !== 'undefined') {\n    this.graphics.setStrokeStyle(this.strokeSize);\n    this.graphics.beginStroke(this.strokeColor);\n    this.graphics.moveTo(path.poses[0].pose.position.x / this.scaleX, path.poses[0].pose.position.y / -this.scaleY);\n\n    for (var i = 1; i < path.poses.length; ++i) {\n      this.graphics.lineTo(path.poses[i].pose.position.x / this.scaleX, path.poses[i].pose.position.y / -this.scaleY);\n    }\n\n    this.graphics.endStroke();\n  }\n};\n\nROS2D.PathShape.prototype.__proto__ = createjs.Shape.prototype;\n/**\n * @author Bart van Vliet - bart@dobots.nl\n */\n\n/**\n * A polygon that can be edited by an end user\n *\n * @constructor\n * @param options - object with following keys:\n *   * pose (optional) - the first pose of the trace\n *   * lineSize (optional) - the width of the lines\n *   * lineColor (optional) - the createjs color of the lines\n *   * pointSize (optional) - the size of the points\n *   * pointColor (optional) - the createjs color of the points\n *   * fillColor (optional) - the createjs color to fill the polygon\n *   * lineCallBack (optional) - callback function for mouse interaction with a line\n *   * pointCallBack (optional) - callback function for mouse interaction with a point\n */\n\nROS2D.PolygonMarker = function (options) {\n  //\tvar that = this;\n  options = options || {};\n  this.lineSize = options.lineSize || 3;\n  this.lineColor = options.lineColor || createjs.Graphics.getRGB(0, 0, 255, 0.66);\n  this.pointSize = options.pointSize || 10;\n  this.pointColor = options.pointColor || createjs.Graphics.getRGB(255, 0, 0, 0.66);\n  this.fillColor = options.pointColor || createjs.Graphics.getRGB(0, 255, 0, 0.33);\n  this.lineCallBack = options.lineCallBack;\n  this.pointCallBack = options.pointCallBack; // Array of point shapes\n  //\tthis.points = [];\n\n  this.pointContainer = new createjs.Container(); // Array of line shapes\n  //\tthis.lines = [];\n\n  this.lineContainer = new createjs.Container();\n  this.fillShape = new createjs.Shape(); // Container with all the lines and points\n\n  createjs.Container.call(this);\n  this.addChild(this.fillShape);\n  this.addChild(this.lineContainer);\n  this.addChild(this.pointContainer);\n};\n/**\n * Internal use only\n */\n\n\nROS2D.PolygonMarker.prototype.createLineShape = function (startPoint, endPoint) {\n  var line = new createjs.Shape(); //\tline.graphics.setStrokeStyle(this.strokeSize);\n  //\tline.graphics.beginStroke(this.strokeColor);\n  //\tline.graphics.moveTo(startPoint.x, startPoint.y);\n  //\tline.graphics.lineTo(endPoint.x, endPoint.y);\n\n  this.editLineShape(line, startPoint, endPoint);\n  var that = this;\n  line.addEventListener('mousedown', function (event) {\n    if (that.lineCallBack !== null && typeof that.lineCallBack !== 'undefined') {\n      that.lineCallBack('mousedown', event, that.lineContainer.getChildIndex(event.target));\n    }\n  });\n  return line;\n};\n/**\n * Internal use only\n */\n\n\nROS2D.PolygonMarker.prototype.editLineShape = function (line, startPoint, endPoint) {\n  line.graphics.clear();\n  line.graphics.setStrokeStyle(this.lineSize);\n  line.graphics.beginStroke(this.lineColor);\n  line.graphics.moveTo(startPoint.x, startPoint.y);\n  line.graphics.lineTo(endPoint.x, endPoint.y);\n};\n/**\n * Internal use only\n */\n\n\nROS2D.PolygonMarker.prototype.createPointShape = function (pos) {\n  var point = new createjs.Shape();\n  point.graphics.beginFill(this.pointColor);\n  point.graphics.drawCircle(0, 0, this.pointSize);\n  point.x = pos.x;\n  point.y = -pos.y;\n  var that = this;\n  point.addEventListener('mousedown', function (event) {\n    if (that.pointCallBack !== null && typeof that.pointCallBack !== 'undefined') {\n      that.pointCallBack('mousedown', event, that.pointContainer.getChildIndex(event.target));\n    }\n  });\n  return point;\n};\n/**\n * Adds a point to the polygon\n *\n * @param position of type ROSLIB.Vector3\n */\n\n\nROS2D.PolygonMarker.prototype.addPoint = function (pos) {\n  var point = this.createPointShape(pos);\n  this.pointContainer.addChild(point);\n  var numPoints = this.pointContainer.getNumChildren(); // 0 points -> 1 point, 0 lines\n  // 1 point  -> 2 points, lines: add line between previous and new point, add line between new point and first point\n  // 2 points -> 3 points, 3 lines: change last line, add line between new point and first point\n  // 3 points -> 4 points, 4 lines: change last line, add line between new point and first point\n  // etc\n\n  if (numPoints < 2) {// Now 1 point\n  } else if (numPoints < 3) {\n    // Now 2 points: add line between previous and new point\n    var line = this.createLineShape(this.pointContainer.getChildAt(numPoints - 2), point);\n    this.lineContainer.addChild(line);\n  }\n\n  if (numPoints > 2) {\n    // Now 3 or more points: change last line\n    this.editLineShape(this.lineContainer.getChildAt(numPoints - 2), this.pointContainer.getChildAt(numPoints - 2), point);\n  }\n\n  if (numPoints > 1) {\n    // Now 2 or more points: add line between new point and first point\n    var lineEnd = this.createLineShape(point, this.pointContainer.getChildAt(0));\n    this.lineContainer.addChild(lineEnd);\n  }\n\n  this.drawFill();\n};\n/**\n * Removes a point from the polygon\n *\n * @param obj either an index (integer) or a point shape of the polygon\n */\n\n\nROS2D.PolygonMarker.prototype.remPoint = function (obj) {\n  var index; //\tvar point;\n\n  if (obj instanceof createjs.Shape) {\n    index = this.pointContainer.getChildIndex(obj); //\t\tpoint = obj;\n  } else {\n    index = obj; //\t\tpoint = this.pointContainer.getChildAt(index);\n  } // 0 points -> 0 points, 0 lines\n  // 1 point  -> 0 points, 0 lines\n  // 2 points -> 1 point,  0 lines: remove all lines\n  // 3 points -> 2 points, 2 lines: change line before point to remove, remove line after point to remove\n  // 4 points -> 3 points, 3 lines: change line before point to remove, remove line after point to remove\n  // etc\n\n\n  var numPoints = this.pointContainer.getNumChildren();\n\n  if (numPoints < 2) {} else if (numPoints < 3) {\n    // 2 points: remove all lines\n    this.lineContainer.removeAllChildren();\n  } else {\n    // 3 or more points: change line before point to remove, remove line after point to remove\n    this.editLineShape(this.lineContainer.getChildAt((index - 1 + numPoints) % numPoints), this.pointContainer.getChildAt((index - 1 + numPoints) % numPoints), this.pointContainer.getChildAt((index + 1) % numPoints));\n    this.lineContainer.removeChildAt(index);\n  }\n\n  this.pointContainer.removeChildAt(index); //\tthis.points.splice(index, 1);\n\n  this.drawFill();\n};\n/**\n * Moves a point of the polygon\n *\n * @param obj either an index (integer) or a point shape of the polygon\n * @param position of type ROSLIB.Vector3\n */\n\n\nROS2D.PolygonMarker.prototype.movePoint = function (obj, newPos) {\n  var index;\n  var point;\n\n  if (obj instanceof createjs.Shape) {\n    index = this.pointContainer.getChildIndex(obj);\n    point = obj;\n  } else {\n    index = obj;\n    point = this.pointContainer.getChildAt(index);\n  }\n\n  point.x = newPos.x;\n  point.y = -newPos.y;\n  var numPoints = this.pointContainer.getNumChildren();\n\n  if (numPoints > 1) {\n    // line before moved point\n    var line1 = this.lineContainer.getChildAt((index - 1 + numPoints) % numPoints);\n    this.editLineShape(line1, this.pointContainer.getChildAt((index - 1 + numPoints) % numPoints), point); // line after moved point\n\n    var line2 = this.lineContainer.getChildAt(index);\n    this.editLineShape(line2, point, this.pointContainer.getChildAt((index + 1) % numPoints));\n  }\n\n  this.drawFill();\n};\n/**\n * Splits a line of the polygon: inserts a point at the center of the line\n *\n * @param obj either an index (integer) or a line shape of the polygon\n */\n\n\nROS2D.PolygonMarker.prototype.splitLine = function (obj) {\n  var index;\n  var line;\n\n  if (obj instanceof createjs.Shape) {\n    index = this.lineContainer.getChildIndex(obj);\n    line = obj;\n  } else {\n    index = obj;\n    line = this.lineContainer.getChildAt(index);\n  }\n\n  var numPoints = this.pointContainer.getNumChildren();\n  var xs = this.pointContainer.getChildAt(index).x;\n  var ys = this.pointContainer.getChildAt(index).y;\n  var xe = this.pointContainer.getChildAt((index + 1) % numPoints).x;\n  var ye = this.pointContainer.getChildAt((index + 1) % numPoints).y;\n  var xh = (xs + xe) / 2.0;\n  var yh = (ys + ye) / 2.0;\n  var pos = new ROSLIB.Vector3({\n    x: xh,\n    y: -yh\n  }); // Add a point in the center of the line to split\n\n  var point = this.createPointShape(pos);\n  this.pointContainer.addChildAt(point, index + 1);\n  ++numPoints; // Add a line between the new point and the end of the line to split\n\n  var lineNew = this.createLineShape(point, this.pointContainer.getChildAt((index + 2) % numPoints));\n  this.lineContainer.addChildAt(lineNew, index + 1); // Set the endpoint of the line to split to the new point\n\n  this.editLineShape(line, this.pointContainer.getChildAt(index), point);\n  this.drawFill();\n};\n/**\n * Internal use only\n */\n\n\nROS2D.PolygonMarker.prototype.drawFill = function () {\n  var numPoints = this.pointContainer.getNumChildren();\n\n  if (numPoints > 2) {\n    var g = this.fillShape.graphics;\n    g.clear();\n    g.setStrokeStyle(0);\n    g.moveTo(this.pointContainer.getChildAt(0).x, this.pointContainer.getChildAt(0).y);\n    g.beginStroke();\n    g.beginFill(this.fillColor);\n\n    for (var i = 1; i < numPoints; ++i) {\n      g.lineTo(this.pointContainer.getChildAt(i).x, this.pointContainer.getChildAt(i).y);\n    }\n\n    g.closePath();\n    g.endFill();\n    g.endStroke();\n  } else {\n    this.fillShape.graphics.clear();\n  }\n};\n\nROS2D.PolygonMarker.prototype.__proto__ = createjs.Container.prototype;\n/**\n * @author Bart van Vliet - bart@dobots.nl\n */\n\n/**\n * A trace of poses, handy to see where a robot has been\n *\n * @constructor\n * @param options - object with following keys:\n *   * pose (optional) - the first pose of the trace\n *   * strokeSize (optional) - the size of the outline\n *   * strokeColor (optional) - the createjs color for the stroke\n *   * maxPoses (optional) - the maximum number of poses to keep, 0 for infinite\n *   * minDist (optional) - the minimal distance between poses to use the pose for drawing (default 0.05)\n */\n\nROS2D.TraceShape = function (options) {\n  //\tvar that = this;\n  options = options || {};\n  var pose = options.pose;\n  this.strokeSize = options.strokeSize || 3;\n  this.strokeColor = options.strokeColor || createjs.Graphics.getRGB(0, 0, 0);\n  this.maxPoses = options.maxPoses || 100;\n  this.minDist = options.minDist || 0.05; // Store minDist as the square of it\n\n  this.minDist = this.minDist * this.minDist; // Array of the poses\n  // TODO: do we need this?\n\n  this.poses = []; // Create the graphics\n\n  this.graphics = new createjs.Graphics();\n  this.graphics.setStrokeStyle(this.strokeSize);\n  this.graphics.beginStroke(this.strokeColor); // Add first pose if given\n\n  if (pose !== null && typeof pose !== 'undefined') {\n    this.poses.push(pose);\n  } // Create the shape\n\n\n  createjs.Shape.call(this, this.graphics);\n};\n/**\n * Adds a pose to the trace and updates the graphics\n *\n * @param pose of type ROSLIB.Pose\n */\n\n\nROS2D.TraceShape.prototype.addPose = function (pose) {\n  var last = this.poses.length - 1;\n\n  if (last < 0) {\n    this.poses.push(pose);\n    this.graphics.moveTo(pose.position.x / this.scaleX, pose.position.y / -this.scaleY);\n  } else {\n    var prevX = this.poses[last].position.x;\n    var prevY = this.poses[last].position.y;\n    var dx = pose.position.x - prevX;\n    var dy = pose.position.y - prevY;\n\n    if (dx * dx + dy * dy > this.minDist) {\n      this.graphics.lineTo(pose.position.x / this.scaleX, pose.position.y / -this.scaleY);\n      this.poses.push(pose);\n    }\n  }\n\n  if (this.maxPoses > 0 && this.maxPoses < this.poses.length) {\n    this.popFront();\n  }\n};\n/**\n * Removes front pose and updates the graphics\n */\n\n\nROS2D.TraceShape.prototype.popFront = function () {\n  if (this.poses.length > 0) {\n    this.poses.shift(); // TODO: shift drawing instructions rather than doing it all over\n\n    this.graphics.clear();\n    this.graphics.setStrokeStyle(this.strokeSize);\n    this.graphics.beginStroke(this.strokeColor);\n    this.graphics.lineTo(this.poses[0].position.x / this.scaleX, this.poses[0].position.y / -this.scaleY);\n\n    for (var i = 1; i < this.poses.length; ++i) {\n      this.graphics.lineTo(this.poses[i].position.x / this.scaleX, this.poses[i].position.y / -this.scaleY);\n    }\n  }\n};\n\nROS2D.TraceShape.prototype.__proto__ = createjs.Shape.prototype;\n/**\n * @author Bart van Vliet - bart@dobots.nl\n */\n\n/**\n * Adds panning to a view\n *\n * @constructor\n * @param options - object with following keys:\n *   * rootObject (optional) - the root object to apply panning to\n */\n\nROS2D.PanView = function (options) {\n  options = options || {};\n  this.rootObject = options.rootObject; // get a handle to the stage\n\n  if (this.rootObject instanceof createjs.Stage) {\n    this.stage = this.rootObject;\n  } else {\n    this.stage = this.rootObject.getStage();\n  }\n\n  this.startPos = new ROSLIB.Vector3();\n};\n\nROS2D.PanView.prototype.startPan = function (startX, startY) {\n  this.startPos.x = startX;\n  this.startPos.y = startY;\n};\n\nROS2D.PanView.prototype.pan = function (curX, curY) {\n  this.stage.x += curX - this.startPos.x;\n  this.startPos.x = curX;\n  this.stage.y += curY - this.startPos.y;\n  this.startPos.y = curY;\n};\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A Viewer can be used to render an interactive 2D scene to a HTML5 canvas.\n *\n * @constructor\n * @param options - object with following keys:\n *   * divID - the ID of the div to place the viewer in\n *   * width - the initial width, in pixels, of the canvas\n *   * height - the initial height, in pixels, of the canvas\n *   * background (optional) - the color to render the background, like '#efefef'\n */\n\n\nROS2D.Viewer = function (options) {\n  var that = this;\n  options = options || {};\n  var divID = options.divID;\n  this.width = options.width;\n  this.height = options.height;\n  var background = options.background || '#111111'; // create the canvas to render to\n\n  var canvas = document.createElement('canvas');\n  canvas.width = this.width;\n  canvas.height = this.height;\n  canvas.style.background = background;\n  document.getElementById(divID).appendChild(canvas); // create the easel to use\n\n  this.scene = new createjs.Stage(canvas); // change Y axis center\n  // this.scene.x = this.width;\n\n  this.scene.y = this.height; // add the renderer to the page\n\n  document.getElementById(divID).appendChild(canvas); // update at 30fps\n\n  createjs.Ticker.setFPS(30);\n  createjs.Ticker.addEventListener('tick', this.scene);\n};\n/**\n * Add the given createjs object to the global scene in the viewer.\n *\n * @param object - the object to add\n */\n\n\nROS2D.Viewer.prototype.addObject = function (object) {\n  this.scene.addChild(object);\n};\n/**\n * Scale the scene to fit the given width and height into the current canvas.\n *\n * @param width - the width to scale to in meters\n * @param height - the height to scale to in meters\n */\n\n\nROS2D.Viewer.prototype.scaleToDimensions = function (width, height) {\n  // restore to values before shifting, if ocurred\n  this.scene.x = typeof this.scene.x_prev_shift !== 'undefined' ? this.scene.x_prev_shift : this.scene.x;\n  this.scene.y = typeof this.scene.y_prev_shift !== 'undefined' ? this.scene.y_prev_shift : this.scene.y; // save scene scaling\n\n  this.scene.scaleX = this.width / width;\n  this.scene.scaleY = this.height / height; //  Them vao map bi sai lech\n  // var scaleX = ((this.height / height) >= (this.width / width)) ? (this.height / height) : (this.width / width);\n  // var scaleX = this.width / width;\n  // this.scene.scaleX = scaleX;\n  // this.scene.scaleY = scaleX;\n};\n/**\n * Shift the main view of the canvas by the given amount. This is based on the\n * ROS coordinate system. That is, Y is opposite that of a traditional canvas.\n *\n * @param x - the amount to shift by in the x direction in meters\n * @param y - the amount to shift by in the y direction in meters\n */\n\n\nROS2D.Viewer.prototype.shift = function (x, y) {\n  // save current offset\n  this.scene.x_prev_shift = this.scene.x;\n  this.scene.y_prev_shift = this.scene.y; // shift scene by scaling the desired offset\n\n  this.scene.x -= x * this.scene.scaleX; // this.scene.x = (this.width/2);\n\n  this.scene.y += y * this.scene.scaleY; // this.scene.y = 0; //them vao sai lech map\n};\n\nROS2D.Viewer.prototype.fillFrame = function (width, height, x, y) {\n  // restore to values before shifting, if ocurred\n  // this.scene.x = typeof this.scene.x_prev_shift !== 'undefined' ? this.scene.x_prev_shift : this.scene.x;\n  // this.scene.y = typeof this.scene.y_prev_shift !== 'undefined' ? this.scene.y_prev_shift : this.scene.y;\n  // save scene scaling\n  var scaleX = this.width / width;\n  this.scene.scaleX = scaleX;\n  this.scene.scaleY = scaleX; // save current offset\n\n  this.scene.x_prev_shift = this.scene.x;\n  this.scene.y_prev_shift = this.scene.y; // shift scene by scaling the desired offset\n\n  this.scene.x = -x * this.scene.scaleX;\n  this.scene.y = (height - y - 1) * this.scene.scaleY; // this.scene.y = 0;\n};\n/**\n * @author Bart van Vliet - bart@dobots.nl\n */\n\n/**\n * Adds zooming to a view\n *\n * @constructor\n * @param options - object with following keys:\n *   * rootObject (optional) - the root object to apply zoom to\n *   * minScale (optional) - minimum scale to set to preserve precision\n */\n\n\nROS2D.ZoomView = function (options) {\n  options = options || {};\n  this.rootObject = options.rootObject;\n  this.minScale = options.minScale || 0.001; // get a handle to the stage\n\n  if (this.rootObject instanceof createjs.Stage) {\n    this.stage = this.rootObject;\n  } else {\n    this.stage = this.rootObject.getStage();\n  }\n\n  this.center = new ROSLIB.Vector3();\n  this.startShift = new ROSLIB.Vector3();\n  this.startScale = new ROSLIB.Vector3();\n};\n\nROS2D.ZoomView.prototype.startZoom = function (centerX, centerY) {\n  this.center.x = centerX;\n  this.center.y = centerY;\n  this.startShift.x = this.stage.x;\n  this.startShift.y = this.stage.y;\n  this.startScale.x = this.stage.scaleX;\n  this.startScale.y = this.stage.scaleY;\n};\n\nROS2D.ZoomView.prototype.zoom = function (zoom) {\n  // Make sure scale doesn't become too small\n  if (this.startScale.x * zoom < this.minScale) {\n    zoom = this.minScale / this.startScale.x;\n  }\n\n  if (this.startScale.y * zoom < this.minScale) {\n    zoom = this.minScale / this.startScale.y;\n  }\n\n  this.stage.scaleX = this.startScale.x * zoom;\n  this.stage.scaleY = this.startScale.y * zoom;\n  this.stage.x = this.startShift.x - (this.center.x - this.startShift.x) * (this.stage.scaleX / this.startScale.x - 1);\n  this.stage.y = this.startShift.y - (this.center.y - this.startShift.y) * (this.stage.scaleY / this.startScale.y - 1);\n};\n\nexport default ROS2D;","map":{"version":3,"sources":["/home/binhlee/Desktop/kobuki_web_source/react-nav2djs-0.0.3/package/es/vendor/ros2d.js"],"names":["ROSLIB","EventEmitter2","ROS2D","REVISION","createjs","Stage","prototype","globalToRos","x","y","rosX","scaleX","rosY","scaleY","Vector3","rosToGlobal","pos","rosQuaternionToGlobalTheta","orientation","q0","w","q1","q2","q3","z","Math","atan2","PI","ImageMap","options","message","image","pose","Pose","position","origin","width","height","Bitmap","call","resolution","__proto__","ImageMapClient","that","ros","topic","rootObject","Container","currentImage","Shape","rosTopic","Topic","name","messageType","subscribe","unsubscribe","addChild","Grid","size","emit","OccupancyGrid","canvas","document","createElement","context","getContext","info","imageData","createImageData","row","col","mapI","data","val","i","putImageData","alpha","OccupancyGridClient","topic_costmap","topic_path","continuous","currentGrid","currentGridCostmap","compression","index","getChildIndex","removeChild","addChildAt","rosTopicCostmap","rosTopicPath","isCostmap","OccupancyGridSrvClient","service","rosService","Service","serviceType","callService","ServiceRequest","response","map","ArrowShape","strokeSize","strokeColor","Graphics","getRGB","fillColor","pulse","graphics","headLen","headWidth","setStrokeStyle","beginStroke","moveTo","lineTo","beginFill","closePath","endFill","endStroke","growCount","growing","Ticker","addEventListener","cellSize","lineWidth","NavigationArrow","NavigationImage","image_url","onload","originals","paintImage","scale","calculateScale","regY","regX","rotation","Object","defineProperty","get","set","value","SCALE_SIZE","_size","Image","src","PathShape","path","poses","length","setPath","clear","PolygonMarker","lineSize","lineColor","pointSize","pointColor","lineCallBack","pointCallBack","pointContainer","lineContainer","fillShape","createLineShape","startPoint","endPoint","line","editLineShape","event","target","createPointShape","point","drawCircle","addPoint","numPoints","getNumChildren","getChildAt","lineEnd","drawFill","remPoint","obj","removeAllChildren","removeChildAt","movePoint","newPos","line1","line2","splitLine","xs","ys","xe","ye","xh","yh","lineNew","g","TraceShape","maxPoses","minDist","push","addPose","last","prevX","prevY","dx","dy","popFront","shift","PanView","stage","getStage","startPos","startPan","startX","startY","pan","curX","curY","Viewer","divID","background","style","getElementById","appendChild","scene","setFPS","addObject","object","scaleToDimensions","x_prev_shift","y_prev_shift","fillFrame","ZoomView","minScale","center","startShift","startScale","startZoom","centerX","centerY","zoom"],"mappings":"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","sourcesContent":["import 'latest-createjs'\nimport ROSLIB from 'roslib'\nimport EventEmitter2 from 'eventemitter2'\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\nvar ROS2D = ROS2D || {\n  REVISION : '0.9.0'\n};\n\n// convert the given global Stage coordinates to ROS coordinates\ncreatejs.Stage.prototype.globalToRos = function(x, y) {\n  var rosX = (x - this.x) / this.scaleX;\n  var rosY = (this.y - y) / this.scaleY;\n  return new ROSLIB.Vector3({\n    x : rosX,\n    y : rosY\n  });\n};\n\n// convert the given ROS coordinates to global Stage coordinates\ncreatejs.Stage.prototype.rosToGlobal = function(pos) {\n  var x = pos.x * this.scaleX + this.x;\n  var y = pos.y * this.scaleY + this.y;\n  return {\n    x : x,\n    y : y\n  };\n};\n\n// convert a ROS quaternion to theta in degrees\ncreatejs.Stage.prototype.rosQuaternionToGlobalTheta = function(orientation) {\n  // See https://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles#Rotation_matrices\n  // here we use [x y z] = R * [1 0 0]\n  var q0 = orientation.w;\n  var q1 = orientation.x;\n  var q2 = orientation.y;\n  var q3 = orientation.z;\n  // Canvas rotation is clock wise and in degrees\n  return -Math.atan2(2 * (q0 * q3 + q1 * q2), 1 - 2 * (q2 * q2 + q3 * q3)) * 180.0 / Math.PI;\n};\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * An image map is a PNG image scaled to fit to the dimensions of a OccupancyGrid.\n *\n * @constructor\n * @param options - object with following keys:\n *   * message - the occupancy grid map meta data message\n *   * image - the image URL to load\n */\nROS2D.ImageMap = function(options) {\n  options = options || {};\n  var message = options.message;\n  var image = options.image;\n\n  // save the metadata we need\n  this.pose = new ROSLIB.Pose({\n    position : message.origin.position,\n    orientation : message.origin.orientation\n  });\n\n  // set the size\n  this.width = message.width;\n  this.height = message.height;\n\n  // create the bitmap\n  createjs.Bitmap.call(this, image);\n  // change Y direction\n  this.y = -this.height * message.resolution;\n\n  // scale the image\n  this.scaleX = message.resolution;\n  this.scaleY = message.resolution;\n  this.width *= this.scaleX;\n  this.height *= this.scaleY;\n\n  // set the pose\n  this.x += this.pose.position.x;\n  this.y -= this.pose.position.y;\n};\nROS2D.ImageMap.prototype.__proto__ = createjs.Bitmap.prototype;\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A image map is a PNG image scaled to fit to the dimensions of a OccupancyGrid.\n *\n * Emits the following events:\n *   * 'change' - there was an update or change in the map\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * topic (optional) - the map meta data topic to listen to\n *   * image - the image URL to load\n *   * rootObject (optional) - the root object to add this marker to\n */\nROS2D.ImageMapClient = function(options) {\n  var that = this;\n  options = options || {};\n  var ros = options.ros;\n  var topic = options.topic || '/map_metadata';\n  this.image = options.image;\n  this.rootObject = options.rootObject || new createjs.Container();\n\n  // create an empty shape to start with\n  this.currentImage = new createjs.Shape();\n\n  // subscribe to the topic\n  var rosTopic = new ROSLIB.Topic({\n    ros : ros,\n    name : topic,\n    messageType : 'nav_msgs/MapMetaData'\n  });\n\n  rosTopic.subscribe(function(message) {\n    // we only need this once\n    rosTopic.unsubscribe();\n\n    // create the image\n    that.currentImage = new ROS2D.ImageMap({\n      message : message,\n      image : that.image\n    });\n    that.rootObject.addChild(that.currentImage);\n    // work-around for a bug in easeljs -- needs a second object to render correctly\n    that.rootObject.addChild(new ROS2D.Grid({size:1}));\n\n    that.emit('change');\n  });\n};\nROS2D.ImageMapClient.prototype.__proto__ = EventEmitter2.prototype;\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * An OccupancyGrid can convert a ROS occupancy grid message into a createjs Bitmap object.\n *\n * @constructor\n * @param options - object with following keys:\n *   * message - the occupancy grid message\n */\nROS2D.OccupancyGrid = function(options) {\n  options = options || {};\n  var message = options.message;\n\n  // internal drawing canvas\n  var canvas = document.createElement('canvas');\n  var context = canvas.getContext('2d');\n\n  // save the metadata we need\n  this.pose = new ROSLIB.Pose({\n    position : message.info.origin.position,\n    orientation : message.info.origin.orientation\n  });\n\n  // set the size\n  this.width = message.info.width;\n  this.height = message.info.height;\n  canvas.width = this.width;\n  canvas.height = this.height;\n\n  var imageData = context.createImageData(this.width, this.height);\n  for ( var row = 0; row < this.height; row++) {\n    for ( var col = 0; col < this.width; col++) {\n      // determine the index into the map data\n      var mapI = col + ((this.height - row - 1) * this.width);\n      // determine the value\n      var data = message.data[mapI];\n      var val;\n      if (data === 100) {\n        val = 0;\n      } else if (data === 0) {\n        val = 255;\n      } else {\n        val = 127;\n      }\n\n      // determine the index into the image data array\n      var i = (col + (row * this.width)) * 4;\n      // r\n      imageData.data[i] = val;\n      // g\n      imageData.data[++i] = val;\n      // b\n      imageData.data[++i] = val;\n      // a\n      imageData.data[++i] = 255;\n    }\n  }\n  context.putImageData(imageData, 0, 0);\n\n  // create the bitmap\n  createjs.Bitmap.call(this, canvas);\n  // change Y direction\n  this.y = -this.height * message.info.resolution;\n  \n  // scale the image\n  this.scaleX = message.info.resolution;\n  this.scaleY = message.info.resolution;\n  this.width *= this.scaleX;\n  this.height *= this.scaleY;\n\n  // set the pose\n  this.x += this.pose.position.x;\n  this.y -= this.pose.position.y;\n  this.alpha = options.alpha || 1;\n};\nROS2D.OccupancyGrid.prototype.__proto__ = createjs.Bitmap.prototype;\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A map that listens to a given occupancy grid topic.\n *\n * Emits the following events:\n *   * 'change' - there was an update or change in the map\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * topic (optional) - the map topic to listen to\n *   * rootObject (optional) - the root object to add this marker to\n *   * continuous (optional) - if the map should be continuously loaded (e.g., for SLAM)\n */\nROS2D.OccupancyGridClient = function(options) {\n  var that = this;\n  options = options || {};\n  var ros = options.ros;\n  var topic = options.topic || '/map';\n  var topic_costmap = options.topic_costmap || '/move_base_node/global_costmap/costmap';\n  var topic_path = options.topic_path || '/rtabmap/global_path';\n  this.continuous = options.continuous;\n  this.rootObject = options.rootObject || new createjs.Container();\n\n  // current grid that is displayed\n  // create an empty shape to start with, so that the order remains correct.\n  this.currentGrid = new createjs.Shape();\n  this.rootObject.addChild(this.currentGrid);\n  // work-around for a bug in easeljs -- needs a second object to render correctly\n  this.rootObject.addChild(new ROS2D.Grid({size:100}));\n  \n  this.currentGridCostmap = new createjs.Shape();\n  this.rootObject.addChild(this.currentGridCostmap);\n\n  // subscribe to the topic\n  var rosTopic = new ROSLIB.Topic({\n    ros : ros,\n    name : topic,\n    messageType : 'nav_msgs/OccupancyGrid',\n    compression : 'png'\n  });\n\n  rosTopic.subscribe(function(message) {\n    // check for an old map\n    var index = null;\n    if (that.currentGrid) {\n      index = that.rootObject.getChildIndex(that.currentGrid);\n      that.rootObject.removeChild(that.currentGrid);\n    }\n\n    that.currentGrid = new ROS2D.OccupancyGrid({\n      message : message\n    });\n    if (index !== null) {\n      that.rootObject.addChildAt(that.currentGrid, index);\n    }\n    else {\n      that.rootObject.addChild(that.currentGrid);\n    }\n\n    that.emit('change');\n\n    // check if we should unsubscribe\n    if (!that.continuous) {\n      rosTopic.unsubscribe();\n    }\n  });\n  // subscribe to the topic\n  var rosTopicCostmap = new ROSLIB.Topic({\n    ros: ros,\n    name: topic_costmap,\n    messageType: 'nav_msgs/OccupancyGrid',\n    compression: 'png'\n  });\n  var rosTopicPath = new ROSLIB.Topic({\n    ros: ros,\n    name: topic_path,\n    messageType: 'nav_msgs/nav_msgs/Path',\n    compression: 'png'\n  });\n\n  rosTopicCostmap.subscribe(function (message) {\n    // check for an old map\n    var index = null;\n    if (that.currentGridCostmap) {\n      index = that.rootObject.getChildIndex(that.currentGridCostmap);\n      that.rootObject.removeChild(that.currentGridCostmap);\n    }\n\n    that.currentGridCostmap = new ROS2D.OccupancyGrid({\n      message: message,\n      alpha: 0.5,\n      isCostmap: true,\n    });\n    if (index !== null) {\n      that.rootObject.addChildAt(that.currentGridCostmap, index);\n    } else {\n      that.rootObject.addChild(that.currentGridCostmap);\n    }\n\n    // that.emit('change');\n\n    // check if we should unsubscribe\n    if (!that.continuous) {\n      rosTopicCostmap.unsubscribe();\n    }\n  });\n\n  rosTopicPath.subscribe(function (message) {\n    // check for an old map\n    var index = null;\n    if (that.currentGridCostmap) {\n      index = that.rootObject.getChildIndex(that.currentGridCostmap);\n      that.rootObject.removeChild(that.currentGridCostmap);\n    }\n\n    that.currentGridCostmap = new ROS2D.OccupancyGrid({\n      message: message,\n      alpha: 0.5,\n      isCostmap: true,\n    });\n    if (index !== null) {\n      that.rootObject.addChildAt(that.currentGridCostmap, index);\n    } else {\n      that.rootObject.addChild(that.currentGridCostmap);\n    }\n\n    // that.emit('change');\n\n    // check if we should unsubscribe\n    if (!that.continuous) {\n      rosTopicPath.unsubscribe();\n    }\n  });\n\n\n};\nROS2D.OccupancyGridClient.prototype.__proto__ = EventEmitter2.prototype;\n\n/**\n * @author Jihoon Lee- jihoonlee.in@gmail.com\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A static map that receives from map_server.\n *\n * Emits the following events:\n *   * 'change' - there was an update or change in the map\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * service (optional) - the map topic to listen to, like '/static_map'\n *   * rootObject (optional) - the root object to add this marker to\n */\nROS2D.OccupancyGridSrvClient = function(options) {\n  var that = this;\n  options = options || {};\n  var ros = options.ros;\n  var service = options.service || '/static_map';\n  this.rootObject = options.rootObject || new createjs.Container();\n\n  // current grid that is displayed\n  this.currentGrid = null;\n\n  // Setting up to the service\n  var rosService = new ROSLIB.Service({\n    ros : ros,\n    name : service,\n    serviceType : 'nav_msgs/GetMap',\n    compression : 'png'\n  });\n\n  rosService.callService(new ROSLIB.ServiceRequest(),function(response) {\n    // check for an old map\n    if (that.currentGrid) {\n      that.rootObject.removeChild(that.currentGrid);\n    }\n\n    that.currentGrid = new ROS2D.OccupancyGrid({\n      message : response.map\n    });\n    that.rootObject.addChild(that.currentGrid);\n\n    that.emit('change', that.currentGrid);\n  });\n};\nROS2D.OccupancyGridSrvClient.prototype.__proto__ = EventEmitter2.prototype;\n\n/**\n * @author Bart van Vliet - bart@dobots.nl\n */\n\n/**\n * An arrow with line and triangular head, based on the navigation arrow.\n * Aims to the left at 0 rotation, as would be expected.\n *\n * @constructor\n * @param options - object with following keys:\n *   * size (optional) - the size of the marker\n *   * strokeSize (optional) - the size of the outline\n *   * strokeColor (optional) - the createjs color for the stroke\n *   * fillColor (optional) - the createjs color for the fill\n *   * pulse (optional) - if the marker should \"pulse\" over time\n */\nROS2D.ArrowShape = function(options) {\n\tvar that = this;\n\toptions = options || {};\n\tvar size = options.size || 10;\n\tvar strokeSize = options.strokeSize || 3;\n\tvar strokeColor = options.strokeColor || createjs.Graphics.getRGB(0, 0, 0);\n\tvar fillColor = options.fillColor || createjs.Graphics.getRGB(255, 0, 0);\n\tvar pulse = options.pulse;\n\t\n\t// draw the arrow\n\tvar graphics = new createjs.Graphics();\n\t\n\tvar headLen = size / 3.0;\n\tvar headWidth = headLen * 2.0 / 3.0;\n\t\n\tgraphics.setStrokeStyle(strokeSize);\n\tgraphics.beginStroke(strokeColor);\n\tgraphics.moveTo(0, 0);\n\tgraphics.lineTo(size-headLen, 0);\n\t\n\tgraphics.beginFill(fillColor);\n\tgraphics.moveTo(size, 0);\n\tgraphics.lineTo(size-headLen, headWidth / 2.0);\n\tgraphics.lineTo(size-headLen, -headWidth / 2.0);\n\tgraphics.closePath();\n\tgraphics.endFill();\n\tgraphics.endStroke();\n\t\n\t// create the shape\n\tcreatejs.Shape.call(this, graphics);\n\t\n\t// check if we are pulsing\n\tif (pulse) {\n\t\t// have the model \"pulse\"\n\t\tvar growCount = 0;\n\t\tvar growing = true;\n\t\tcreatejs.Ticker.addEventListener('tick', function() {\n\t\t\tif (growing) {\n\t\t\t\tthat.scaleX *= 1.035;\n\t\t\t\tthat.scaleY *= 1.035;\n\t\t\t\tgrowing = (++growCount < 10);\n\t\t\t} else {\n\t\t\t\tthat.scaleX /= 1.035;\n\t\t\t\tthat.scaleY /= 1.035;\n\t\t\t\tgrowing = (--growCount < 0);\n\t\t\t}\n\t\t});\n\t}\n};\nROS2D.ArrowShape.prototype.__proto__ = createjs.Shape.prototype;\n\n/**\n * @author Raffaello Bonghi - raffaello.bonghi@officinerobotiche.it\n */\n\n/**\n * A Grid object draw in map.\n *\n * @constructor\n * @param options - object with following keys:\n *  * size (optional) - the size of the grid\n *  * cellSize (optional) - the cell size of map\n *  * lineWidth (optional) - the width of the lines in the grid\n */\n ROS2D.Grid = function(options) {\n    var that = this;\n    options = options || {};\n    var size = options.size || 10;\n    var cellSize = options.cellSize || 0.1;\n    var lineWidth = options.lineWidth || 0.001;\n    // draw the arrow\n    var graphics = new createjs.Graphics();\n    // line width\n    graphics.setStrokeStyle(lineWidth*5);\n    graphics.beginStroke(createjs.Graphics.getRGB(0, 0, 0));\n    graphics.beginFill(createjs.Graphics.getRGB(255, 0, 0));\n    graphics.moveTo(-size*cellSize, 0);\n    graphics.lineTo(size*cellSize, 0);\n    graphics.moveTo(0, -size*cellSize);\n    graphics.lineTo(0, size*cellSize);\n    graphics.endFill();\n    graphics.endStroke();\n\n    graphics.setStrokeStyle(lineWidth);\n    graphics.beginStroke(createjs.Graphics.getRGB(0, 0, 0));\n    graphics.beginFill(createjs.Graphics.getRGB(255, 0, 0));\n    for (var i = -size; i <= size; i++) {\n        graphics.moveTo(-size*cellSize, i * cellSize);\n        graphics.lineTo(size*cellSize, i * cellSize);\n        graphics.moveTo(i * cellSize, -size*cellSize);\n        graphics.lineTo(i * cellSize, size*cellSize);\n    }\n    graphics.endFill();\n    graphics.endStroke();\n    // create the shape\n    createjs.Shape.call(this, graphics);\n\n};\nROS2D.Grid.prototype.__proto__ = createjs.Shape.prototype;\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A navigation arrow is a directed triangle that can be used to display orientation.\n *\n * @constructor\n * @param options - object with following keys:\n *   * size (optional) - the size of the marker\n *   * strokeSize (optional) - the size of the outline\n *   * strokeColor (optional) - the createjs color for the stroke\n *   * fillColor (optional) - the createjs color for the fill\n *   * pulse (optional) - if the marker should \"pulse\" over time\n */\nROS2D.NavigationArrow = function(options) {\n  var that = this;\n  options = options || {};\n  var size = options.size || 10;\n  var strokeSize = options.strokeSize || 3;\n  var strokeColor = options.strokeColor || createjs.Graphics.getRGB(0, 0, 0);\n  var fillColor = options.fillColor || createjs.Graphics.getRGB(255, 0, 0);\n  var pulse = options.pulse;\n\n  // draw the arrow\n  var graphics = new createjs.Graphics();\n  // line width\n  graphics.setStrokeStyle(strokeSize);\n  graphics.moveTo(-size / 2.0, -size / 2.0);\n  graphics.beginStroke(strokeColor);\n  graphics.beginFill(fillColor);\n  graphics.lineTo(size, 0);\n  graphics.lineTo(-size / 2.0, size / 2.0);\n  graphics.closePath();\n  graphics.endFill();\n  graphics.endStroke();\n\n  // create the shape\n  createjs.Shape.call(this, graphics);\n  \n  // check if we are pulsing\n  if (pulse) {\n    // have the model \"pulse\"\n    var growCount = 0;\n    var growing = true;\n    createjs.Ticker.addEventListener('tick', function() {\n      if (growing) {\n        that.scaleX *= 1.035;\n        that.scaleY *= 1.035;\n        growing = (++growCount < 10);\n      } else {\n        that.scaleX /= 1.035;\n        that.scaleY /= 1.035;\n        growing = (--growCount < 0);\n      }\n    });\n  }\n};\nROS2D.NavigationArrow.prototype.__proto__ = createjs.Shape.prototype;\n\n/**\n * @author Inigo Gonzalez - ingonza85@gmail.com\n */\n\n/**\n * A navigation image that can be used to display orientation.\n *\n * @constructor\n * @param options - object with following keys:\n *   * size (optional) - the size of the marker\n *   * image - the image to use as a marker\n *   * pulse (optional) - if the marker should \"pulse\" over time\n */\nROS2D.NavigationImage = function(options) {\n  var that = this;\n  options = options || {};\n  var size = options.size || 10;\n  var image_url = options.image;\n  var pulse = options.pulse;\n  var alpha = options.alpha || 1;\n  var onload = options.onload || false;\n\n  var originals = {};\n\n  var paintImage = function paintImage(){\n    createjs.Bitmap.call(that, image);\n    var scale = calculateScale(size);\n    that.alpha = alpha;\n    that.scaleX = scale;\n    that.scaleY = scale;\n    that.regY = that.image.height/2;\n    that.regX = that.image.width/2;\n    originals['rotation'] = that.rotation;\n    Object.defineProperty( that, 'rotation', {\n      get: function(){ return originals['rotation'] + 90; },\n      set: function(value){ originals['rotation'] = value; }\n    });\n    if (pulse) {\n      // have the model \"pulse\"\n      var growCount = 0;\n      var growing = true;\n      var SCALE_SIZE = 1.005; //1.020\n      createjs.Ticker.addEventListener('tick', function() {\n        if (growing) {\n          that.scaleX *= SCALE_SIZE;\n          that.scaleY *= SCALE_SIZE;\n          growing = (++growCount < 10);\n        } else {\n          that.scaleX /= SCALE_SIZE;\n          that.scaleY /= SCALE_SIZE;\n          growing = (--growCount < 0);\n        }\n      });\n    }\n  };\n\n   var calculateScale = function calculateScale(_size){\n      return _size / image.width;\n  };\n\n  var image = new Image();\n  image.onload = paintImage;\n  image.src = image_url;\n\n  if (onload == true) {\n    image.onload = paintImage;\n  } else {\n    paintImage();\n  }\n\n};\n\nROS2D.NavigationImage.prototype.__proto__ = createjs.Bitmap.prototype;\n\n/**\n * @author Bart van Vliet - bart@dobots.nl\n */\n\n/**\n * A shape to draw a nav_msgs/Path msg\n *\n * @constructor\n * @param options - object with following keys:\n *   * path (optional) - the initial path to draw\n *   * strokeSize (optional) - the size of the outline\n *   * strokeColor (optional) - the createjs color for the stroke\n */\nROS2D.PathShape = function(options) {\n\toptions = options || {};\n\tvar path = options.path;\n\tthis.strokeSize = options.strokeSize || 3;\n\tthis.strokeColor = options.strokeColor || createjs.Graphics.getRGB(0, 0, 0);\n\t\n\t// draw the line\n\tthis.graphics = new createjs.Graphics();\n\t\n\tif (path !== null && typeof path !== 'undefined') {\n\t\tthis.graphics.setStrokeStyle(this.strokeSize);\n\t\tthis.graphics.beginStroke(this.strokeColor);\n\t\tthis.graphics.moveTo(path.poses[0].pose.position.x / this.scaleX, path.poses[0].pose.position.y / -this.scaleY);\n\t\tfor (var i=1; i<path.poses.length; ++i) {\n\t\t\tthis.graphics.lineTo(path.poses[i].pose.position.x / this.scaleX, path.poses[i].pose.position.y / -this.scaleY);\n\t\t}\n\t\tthis.graphics.endStroke();\n\t}\n\t\n\t// create the shape\n\tcreatejs.Shape.call(this, this.graphics);\n};\n\n/**\n * Set the path to draw\n *\n * @param path of type nav_msgs/Path\n */\nROS2D.PathShape.prototype.setPath = function(path) {\n\tthis.graphics.clear();\n\tif (path !== null && typeof path !== 'undefined') {\n\t\tthis.graphics.setStrokeStyle(this.strokeSize);\n\t\tthis.graphics.beginStroke(this.strokeColor);\n\t\tthis.graphics.moveTo(path.poses[0].pose.position.x / this.scaleX, path.poses[0].pose.position.y / -this.scaleY);\n\t\tfor (var i=1; i<path.poses.length; ++i) {\n\t\t\tthis.graphics.lineTo(path.poses[i].pose.position.x / this.scaleX, path.poses[i].pose.position.y / -this.scaleY);\n\t\t}\n\t\tthis.graphics.endStroke();\n\t}\n};\n\nROS2D.PathShape.prototype.__proto__ = createjs.Shape.prototype;\n\n/**\n * @author Bart van Vliet - bart@dobots.nl\n */\n\n/**\n * A polygon that can be edited by an end user\n *\n * @constructor\n * @param options - object with following keys:\n *   * pose (optional) - the first pose of the trace\n *   * lineSize (optional) - the width of the lines\n *   * lineColor (optional) - the createjs color of the lines\n *   * pointSize (optional) - the size of the points\n *   * pointColor (optional) - the createjs color of the points\n *   * fillColor (optional) - the createjs color to fill the polygon\n *   * lineCallBack (optional) - callback function for mouse interaction with a line\n *   * pointCallBack (optional) - callback function for mouse interaction with a point\n */\nROS2D.PolygonMarker = function(options) {\n//\tvar that = this;\n\toptions = options || {};\n\tthis.lineSize = options.lineSize || 3;\n\tthis.lineColor = options.lineColor || createjs.Graphics.getRGB(0, 0, 255, 0.66);\n\tthis.pointSize = options.pointSize || 10;\n\tthis.pointColor = options.pointColor || createjs.Graphics.getRGB(255, 0, 0, 0.66);\n\tthis.fillColor = options.pointColor || createjs.Graphics.getRGB(0, 255, 0, 0.33);\n\tthis.lineCallBack = options.lineCallBack;\n\tthis.pointCallBack = options.pointCallBack;\n\t\n\t// Array of point shapes\n//\tthis.points = [];\n\tthis.pointContainer = new createjs.Container();\n\t\n\t// Array of line shapes\n//\tthis.lines = [];\n\tthis.lineContainer = new createjs.Container();\n\t\n\tthis.fillShape = new createjs.Shape();\n\t\n\t// Container with all the lines and points\n\tcreatejs.Container.call(this);\n\t\n\tthis.addChild(this.fillShape);\n\tthis.addChild(this.lineContainer);\n\tthis.addChild(this.pointContainer);\n};\n\n/**\n * Internal use only\n */\nROS2D.PolygonMarker.prototype.createLineShape = function(startPoint, endPoint) {\n\tvar line = new createjs.Shape();\n//\tline.graphics.setStrokeStyle(this.strokeSize);\n//\tline.graphics.beginStroke(this.strokeColor);\n//\tline.graphics.moveTo(startPoint.x, startPoint.y);\n//\tline.graphics.lineTo(endPoint.x, endPoint.y);\n\tthis.editLineShape(line, startPoint, endPoint);\n\t\n\tvar that = this;\n\tline.addEventListener('mousedown', function(event) {\n\t\tif (that.lineCallBack !== null && typeof that.lineCallBack !== 'undefined') {\n\t\t\tthat.lineCallBack('mousedown', event, that.lineContainer.getChildIndex(event.target));\n\t\t}\n\t});\n\t\n\treturn line;\n};\n\n/**\n * Internal use only\n */\nROS2D.PolygonMarker.prototype.editLineShape = function(line, startPoint, endPoint) {\n\tline.graphics.clear();\n\tline.graphics.setStrokeStyle(this.lineSize);\n\tline.graphics.beginStroke(this.lineColor);\n\tline.graphics.moveTo(startPoint.x, startPoint.y);\n\tline.graphics.lineTo(endPoint.x, endPoint.y);\n};\n\n/**\n * Internal use only\n */\nROS2D.PolygonMarker.prototype.createPointShape = function(pos) {\n\tvar point = new createjs.Shape();\n\tpoint.graphics.beginFill(this.pointColor);\n\tpoint.graphics.drawCircle(0, 0, this.pointSize);\n\tpoint.x = pos.x;\n\tpoint.y = -pos.y;\n\t\n\tvar that = this;\n\tpoint.addEventListener('mousedown', function(event) {\n\t\tif (that.pointCallBack !== null && typeof that.pointCallBack !== 'undefined') {\n\t\t\tthat.pointCallBack('mousedown', event, that.pointContainer.getChildIndex(event.target));\n\t\t}\n\t});\n\t\n\treturn point;\n};\n\n/**\n * Adds a point to the polygon\n *\n * @param position of type ROSLIB.Vector3\n */\nROS2D.PolygonMarker.prototype.addPoint = function(pos) {\n\tvar point = this.createPointShape(pos);\n\tthis.pointContainer.addChild(point);\n\tvar numPoints = this.pointContainer.getNumChildren();\n\t\n\t// 0 points -> 1 point, 0 lines\n\t// 1 point  -> 2 points, lines: add line between previous and new point, add line between new point and first point\n\t// 2 points -> 3 points, 3 lines: change last line, add line between new point and first point\n\t// 3 points -> 4 points, 4 lines: change last line, add line between new point and first point\n\t// etc\n\t\n\tif (numPoints < 2) {\n\t\t// Now 1 point\n\t}\n\telse if (numPoints < 3) {\n\t\t// Now 2 points: add line between previous and new point\n\t\tvar line = this.createLineShape(this.pointContainer.getChildAt(numPoints-2), point);\n\t\tthis.lineContainer.addChild(line);\n\t}\n\tif (numPoints > 2) {\n\t\t// Now 3 or more points: change last line\n\t\tthis.editLineShape(this.lineContainer.getChildAt(numPoints-2), this.pointContainer.getChildAt(numPoints-2), point);\n\t}\n\tif (numPoints > 1) {\n\t\t// Now 2 or more points: add line between new point and first point\n\t\tvar lineEnd = this.createLineShape(point, this.pointContainer.getChildAt(0));\n\t\tthis.lineContainer.addChild(lineEnd);\n\t}\n\t\n\tthis.drawFill();\n};\n\n/**\n * Removes a point from the polygon\n *\n * @param obj either an index (integer) or a point shape of the polygon\n */\nROS2D.PolygonMarker.prototype.remPoint = function(obj) {\n\tvar index;\n//\tvar point;\n\tif (obj instanceof createjs.Shape) {\n\t\tindex = this.pointContainer.getChildIndex(obj);\n//\t\tpoint = obj;\n\t}\n\telse {\n\t\tindex = obj;\n//\t\tpoint = this.pointContainer.getChildAt(index);\n\t}\n\t\n\t// 0 points -> 0 points, 0 lines\n\t// 1 point  -> 0 points, 0 lines\n\t// 2 points -> 1 point,  0 lines: remove all lines\n\t// 3 points -> 2 points, 2 lines: change line before point to remove, remove line after point to remove\n\t// 4 points -> 3 points, 3 lines: change line before point to remove, remove line after point to remove\n\t// etc\n\t\n\tvar numPoints = this.pointContainer.getNumChildren();\n\t\n\tif (numPoints < 2) {\n\t\t\n\t}\n\telse if (numPoints < 3) {\n\t\t// 2 points: remove all lines\n\t\tthis.lineContainer.removeAllChildren();\n\t}\n\telse {\n\t\t// 3 or more points: change line before point to remove, remove line after point to remove\n\t\tthis.editLineShape(\n\t\t\tthis.lineContainer.getChildAt((index-1+numPoints)%numPoints),\n\t\t\tthis.pointContainer.getChildAt((index-1+numPoints)%numPoints),\n\t\t\tthis.pointContainer.getChildAt((index+1)%numPoints)\n\t\t);\n\t\tthis.lineContainer.removeChildAt(index);\n\t}\n\tthis.pointContainer.removeChildAt(index);\n//\tthis.points.splice(index, 1);\n\t\n\tthis.drawFill();\n};\n\n/**\n * Moves a point of the polygon\n *\n * @param obj either an index (integer) or a point shape of the polygon\n * @param position of type ROSLIB.Vector3\n */\nROS2D.PolygonMarker.prototype.movePoint = function(obj, newPos) {\n\tvar index;\n\tvar point;\n\tif (obj instanceof createjs.Shape) {\n\t\tindex = this.pointContainer.getChildIndex(obj);\n\t\tpoint = obj;\n\t}\n\telse {\n\t\tindex = obj;\n\t\tpoint = this.pointContainer.getChildAt(index);\n\t}\n\tpoint.x = newPos.x;\n\tpoint.y = -newPos.y;\n\t\n\tvar numPoints = this.pointContainer.getNumChildren();\n\tif (numPoints > 1) {\n\t\t// line before moved point\n\t\tvar line1 = this.lineContainer.getChildAt((index-1+numPoints)%numPoints);\n\t\tthis.editLineShape(line1, this.pointContainer.getChildAt((index-1+numPoints)%numPoints), point);\n\t\t\n\t\t// line after moved point\n\t\tvar line2 = this.lineContainer.getChildAt(index);\n\t\tthis.editLineShape(line2, point, this.pointContainer.getChildAt((index+1)%numPoints));\n\t}\n\t\n\tthis.drawFill();\n};\n\n/**\n * Splits a line of the polygon: inserts a point at the center of the line\n *\n * @param obj either an index (integer) or a line shape of the polygon\n */\nROS2D.PolygonMarker.prototype.splitLine = function(obj) {\n\tvar index;\n\tvar line;\n\tif (obj instanceof createjs.Shape) {\n\t\tindex = this.lineContainer.getChildIndex(obj);\n\t\tline = obj;\n\t}\n\telse {\n\t\tindex = obj;\n\t\tline = this.lineContainer.getChildAt(index);\n\t}\n\tvar numPoints = this.pointContainer.getNumChildren();\n\tvar xs = this.pointContainer.getChildAt(index).x;\n\tvar ys = this.pointContainer.getChildAt(index).y;\n\tvar xe = this.pointContainer.getChildAt((index+1)%numPoints).x;\n\tvar ye = this.pointContainer.getChildAt((index+1)%numPoints).y;\n\tvar xh = (xs+xe)/2.0;\n\tvar yh = (ys+ye)/2.0;\n\tvar pos = new ROSLIB.Vector3({ x:xh, y:-yh });\n\t\n\t// Add a point in the center of the line to split\n\tvar point = this.createPointShape(pos);\n\tthis.pointContainer.addChildAt(point, index+1);\n\t++numPoints;\n\t\n\t// Add a line between the new point and the end of the line to split\n\tvar lineNew = this.createLineShape(point, this.pointContainer.getChildAt((index+2)%numPoints));\n\tthis.lineContainer.addChildAt(lineNew, index+1);\n\n\t// Set the endpoint of the line to split to the new point\n\tthis.editLineShape(line, this.pointContainer.getChildAt(index), point);\n\t\n\tthis.drawFill();\n};\n\n/**\n * Internal use only\n */\nROS2D.PolygonMarker.prototype.drawFill = function() {\n\tvar numPoints = this.pointContainer.getNumChildren();\n\tif (numPoints > 2) {\n\t\tvar g = this.fillShape.graphics;\n\t\tg.clear();\n\t\tg.setStrokeStyle(0);\n\t\tg.moveTo(this.pointContainer.getChildAt(0).x, this.pointContainer.getChildAt(0).y);\n\t\tg.beginStroke();\n\t\tg.beginFill(this.fillColor);\n\t\tfor (var i=1; i<numPoints; ++i) {\n\t\t\tg.lineTo(this.pointContainer.getChildAt(i).x, this.pointContainer.getChildAt(i).y);\n\t\t}\n\t\tg.closePath();\n\t\tg.endFill();\n\t\tg.endStroke();\n\t}\n\telse {\n\t\tthis.fillShape.graphics.clear();\n\t}\n};\n\n\nROS2D.PolygonMarker.prototype.__proto__ = createjs.Container.prototype;\n\n/**\n * @author Bart van Vliet - bart@dobots.nl\n */\n\n/**\n * A trace of poses, handy to see where a robot has been\n *\n * @constructor\n * @param options - object with following keys:\n *   * pose (optional) - the first pose of the trace\n *   * strokeSize (optional) - the size of the outline\n *   * strokeColor (optional) - the createjs color for the stroke\n *   * maxPoses (optional) - the maximum number of poses to keep, 0 for infinite\n *   * minDist (optional) - the minimal distance between poses to use the pose for drawing (default 0.05)\n */\nROS2D.TraceShape = function(options) {\n//\tvar that = this;\n\toptions = options || {};\n\tvar pose = options.pose;\n\tthis.strokeSize = options.strokeSize || 3;\n\tthis.strokeColor = options.strokeColor || createjs.Graphics.getRGB(0, 0, 0);\n\tthis.maxPoses = options.maxPoses || 100;\n\tthis.minDist = options.minDist || 0.05;\n\t\n\t// Store minDist as the square of it\n\tthis.minDist = this.minDist*this.minDist;\n\t\n\t// Array of the poses\n\t// TODO: do we need this?\n\tthis.poses = [];\n\t\n\t// Create the graphics\n\tthis.graphics = new createjs.Graphics();\n\tthis.graphics.setStrokeStyle(this.strokeSize);\n\tthis.graphics.beginStroke(this.strokeColor);\n\t\n\t// Add first pose if given\n\tif (pose !== null && typeof pose !== 'undefined') {\n\t\tthis.poses.push(pose);\n\t}\n\t\n\t// Create the shape\n\tcreatejs.Shape.call(this, this.graphics);\n};\n\n/**\n * Adds a pose to the trace and updates the graphics\n *\n * @param pose of type ROSLIB.Pose\n */\nROS2D.TraceShape.prototype.addPose = function(pose) {\n\tvar last = this.poses.length-1;\n\tif (last < 0) {\n\t\tthis.poses.push(pose);\n\t\tthis.graphics.moveTo(pose.position.x / this.scaleX, pose.position.y / -this.scaleY);\n\t}\n\telse {\n\t\tvar prevX = this.poses[last].position.x;\n\t\tvar prevY = this.poses[last].position.y;\n\t\tvar dx = (pose.position.x - prevX);\n\t\tvar dy = (pose.position.y - prevY);\n\t\tif (dx*dx + dy*dy > this.minDist) {\n\t\t\tthis.graphics.lineTo(pose.position.x / this.scaleX, pose.position.y / -this.scaleY);\n\t\t\tthis.poses.push(pose);\n\t\t}\n\t}\n\tif (this.maxPoses > 0 && this.maxPoses < this.poses.length) {\n\t\tthis.popFront();\n\t}\n};\n\n/**\n * Removes front pose and updates the graphics\n */\nROS2D.TraceShape.prototype.popFront = function() {\n\tif (this.poses.length > 0) {\n\t\tthis.poses.shift();\n\t\t// TODO: shift drawing instructions rather than doing it all over\n\t\tthis.graphics.clear();\n\t\tthis.graphics.setStrokeStyle(this.strokeSize);\n\t\tthis.graphics.beginStroke(this.strokeColor);\n\t\tthis.graphics.lineTo(this.poses[0].position.x / this.scaleX, this.poses[0].position.y / -this.scaleY);\n\t\tfor (var i=1; i<this.poses.length; ++i) {\n\t\t\tthis.graphics.lineTo(this.poses[i].position.x / this.scaleX, this.poses[i].position.y / -this.scaleY);\n\t\t}\n\t}\n};\n\nROS2D.TraceShape.prototype.__proto__ = createjs.Shape.prototype;\n\n/**\n * @author Bart van Vliet - bart@dobots.nl\n */\n\n/**\n * Adds panning to a view\n *\n * @constructor\n * @param options - object with following keys:\n *   * rootObject (optional) - the root object to apply panning to\n */\nROS2D.PanView = function(options) {\n\toptions = options || {};\n\tthis.rootObject = options.rootObject;\n\t\n\t// get a handle to the stage\n\tif (this.rootObject instanceof createjs.Stage) {\n\t\tthis.stage = this.rootObject;\n\t}\n\telse {\n\t\tthis.stage = this.rootObject.getStage();\n\t}\n\t\n\tthis.startPos = new ROSLIB.Vector3();\n};\n\n\nROS2D.PanView.prototype.startPan = function(startX, startY) {\n\tthis.startPos.x = startX;\n\tthis.startPos.y = startY;\n};\n\nROS2D.PanView.prototype.pan = function(curX, curY) {\n\tthis.stage.x += curX - this.startPos.x;\n\tthis.startPos.x = curX;\n\tthis.stage.y += curY - this.startPos.y;\n\tthis.startPos.y = curY;\n};\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A Viewer can be used to render an interactive 2D scene to a HTML5 canvas.\n *\n * @constructor\n * @param options - object with following keys:\n *   * divID - the ID of the div to place the viewer in\n *   * width - the initial width, in pixels, of the canvas\n *   * height - the initial height, in pixels, of the canvas\n *   * background (optional) - the color to render the background, like '#efefef'\n */\nROS2D.Viewer = function(options) {\n  var that = this;\n  options = options || {};\n  var divID = options.divID;\n  this.width = options.width;\n  this.height = options.height;\n  var background = options.background || '#111111';\n\n  // create the canvas to render to\n  var canvas = document.createElement('canvas');\n  canvas.width = this.width;\n  canvas.height = this.height;\n  canvas.style.background = background;\n  document.getElementById(divID).appendChild(canvas);\n  // create the easel to use\n  this.scene = new createjs.Stage(canvas);\n\n  // change Y axis center\n  // this.scene.x = this.width;\n  this.scene.y = this.height;\n\n  // add the renderer to the page\n  document.getElementById(divID).appendChild(canvas);\n\n  // update at 30fps\n  createjs.Ticker.setFPS(30);\n  createjs.Ticker.addEventListener('tick', this.scene);\n};\n\n/**\n * Add the given createjs object to the global scene in the viewer.\n *\n * @param object - the object to add\n */\nROS2D.Viewer.prototype.addObject = function(object) {\n  this.scene.addChild(object);\n};\n\n/**\n * Scale the scene to fit the given width and height into the current canvas.\n *\n * @param width - the width to scale to in meters\n * @param height - the height to scale to in meters\n */\nROS2D.Viewer.prototype.scaleToDimensions = function(width, height) {\n  // restore to values before shifting, if ocurred\n  this.scene.x = typeof this.scene.x_prev_shift !== 'undefined' ? this.scene.x_prev_shift : this.scene.x;\n  this.scene.y = typeof this.scene.y_prev_shift !== 'undefined' ? this.scene.y_prev_shift : this.scene.y;\n  \n  // save scene scaling\n  this.scene.scaleX = this.width / width;\n  this.scene.scaleY = this.height / height;\n\n  //  Them vao map bi sai lech\n  // var scaleX = ((this.height / height) >= (this.width / width)) ? (this.height / height) : (this.width / width);\n  // var scaleX = this.width / width;\n  // this.scene.scaleX = scaleX;\n  // this.scene.scaleY = scaleX;\n\n};\n\n/**\n * Shift the main view of the canvas by the given amount. This is based on the\n * ROS coordinate system. That is, Y is opposite that of a traditional canvas.\n *\n * @param x - the amount to shift by in the x direction in meters\n * @param y - the amount to shift by in the y direction in meters\n */\nROS2D.Viewer.prototype.shift = function(x, y) {\n  // save current offset\n  this.scene.x_prev_shift = this.scene.x;\n  this.scene.y_prev_shift = this.scene.y;\n\n  // shift scene by scaling the desired offset\n  this.scene.x -= (x * this.scene.scaleX);\n  // this.scene.x = (this.width/2);\n  this.scene.y += (y * this.scene.scaleY);\n  // this.scene.y = 0; //them vao sai lech map\n};\n\nROS2D.Viewer.prototype.fillFrame = function (width, height, x, y) {\n  // restore to values before shifting, if ocurred\n  // this.scene.x = typeof this.scene.x_prev_shift !== 'undefined' ? this.scene.x_prev_shift : this.scene.x;\n  // this.scene.y = typeof this.scene.y_prev_shift !== 'undefined' ? this.scene.y_prev_shift : this.scene.y;\n\n  // save scene scaling\n  var scaleX = this.width / width;\n  this.scene.scaleX = scaleX;\n  this.scene.scaleY = scaleX;\n\n  // save current offset\n  this.scene.x_prev_shift = this.scene.x;\n  this.scene.y_prev_shift = this.scene.y;\n\n  // shift scene by scaling the desired offset\n  this.scene.x = -x * this.scene.scaleX;\n  this.scene.y = ((height - y - 1) * this.scene.scaleY);\n  // this.scene.y = 0;\n}\n\n/**\n * @author Bart van Vliet - bart@dobots.nl\n */\n\n/**\n * Adds zooming to a view\n *\n * @constructor\n * @param options - object with following keys:\n *   * rootObject (optional) - the root object to apply zoom to\n *   * minScale (optional) - minimum scale to set to preserve precision\n */\nROS2D.ZoomView = function(options) {\n\toptions = options || {};\n\tthis.rootObject = options.rootObject;\n\tthis.minScale = options.minScale || 0.001;\n\t\n\t// get a handle to the stage\n\tif (this.rootObject instanceof createjs.Stage) {\n\t\tthis.stage = this.rootObject;\n\t}\n\telse {\n\t\tthis.stage = this.rootObject.getStage();\n\t}\n\t\n\tthis.center = new ROSLIB.Vector3();\n\tthis.startShift = new ROSLIB.Vector3();\n\tthis.startScale = new ROSLIB.Vector3();\n};\n\n\nROS2D.ZoomView.prototype.startZoom = function(centerX, centerY) {\n\tthis.center.x = centerX;\n\tthis.center.y = centerY;\n\tthis.startShift.x = this.stage.x;\n\tthis.startShift.y = this.stage.y;\n\tthis.startScale.x = this.stage.scaleX;\n\tthis.startScale.y = this.stage.scaleY;\n};\n\nROS2D.ZoomView.prototype.zoom = function(zoom) {\n\t// Make sure scale doesn't become too small\n\tif (this.startScale.x*zoom < this.minScale) {\n\t\tzoom = this.minScale/this.startScale.x;\n\t}\n\tif (this.startScale.y*zoom < this.minScale) {\n\t\tzoom = this.minScale/this.startScale.y;\n\t}\n\t\n\tthis.stage.scaleX = this.startScale.x*zoom;\n\tthis.stage.scaleY = this.startScale.y*zoom;\n\t\n\tthis.stage.x = this.startShift.x - (this.center.x-this.startShift.x) * (this.stage.scaleX/this.startScale.x - 1);\n\tthis.stage.y = this.startShift.y - (this.center.y-this.startShift.y) * (this.stage.scaleY/this.startScale.y - 1);\n};\n\nexport default ROS2D;"]},"metadata":{},"sourceType":"module"}